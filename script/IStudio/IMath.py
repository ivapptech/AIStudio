# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IMath')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IMath')
    _IMath = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IMath', [dirname(__file__)])
        except ImportError:
            import _IMath
            return _IMath
        try:
            _mod = imp.load_module('_IMath', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IMath = swig_import_helper()
    del swig_import_helper
else:
    import _IMath
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class IPFFTTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPFFTTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPFFTTransform, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IMath.new_IPFFTTransform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IMath.delete_IPFFTTransform
    __del__ = lambda self: None

    def CosTransform(self, *args):
        return _IMath.IPFFTTransform_CosTransform(self, *args)

    def SinTransform(self, *args):
        return _IMath.IPFFTTransform_SinTransform(self, *args)

    def SetupFFT(self, *args):
        return _IMath.IPFFTTransform_SetupFFT(self, *args)

    def CFFT(self, *args):
        return _IMath.IPFFTTransform_CFFT(self, *args)

    def FFT(self, *args):
        return _IMath.IPFFTTransform_FFT(self, *args)

    def CInverseFFT(self, *args):
        return _IMath.IPFFTTransform_CInverseFFT(self, *args)

    def InverseFFT(self, *args):
        return _IMath.IPFFTTransform_InverseFFT(self, *args)

    def SetupFFT2D(self, *args):
        return _IMath.IPFFTTransform_SetupFFT2D(self, *args)

    def CFFT2D(self, *args):
        return _IMath.IPFFTTransform_CFFT2D(self, *args)

    def FFT2D(self, *args):
        return _IMath.IPFFTTransform_FFT2D(self, *args)

    def CInverseFFT2D(self, *args):
        return _IMath.IPFFTTransform_CInverseFFT2D(self, *args)

    def InverseFFT2D(self, *args):
        return _IMath.IPFFTTransform_InverseFFT2D(self, *args)

    def SwapQuadrant2D(self, *args):
        return _IMath.IPFFTTransform_SwapQuadrant2D(self, *args)

    def AmplitudeSpectrum(self, *args):
        return _IMath.IPFFTTransform_AmplitudeSpectrum(self, *args)

    def AmpPhaseSpectrum(self, *args):
        return _IMath.IPFFTTransform_AmpPhaseSpectrum(self, *args)

    def PowerSpectrum(self, *args):
        return _IMath.IPFFTTransform_PowerSpectrum(self, *args)

    def FastHilbertTransform(self, *args):
        return _IMath.IPFFTTransform_FastHilbertTransform(self, *args)

    def InverseFastHilbertTransform(self, *args):
        return _IMath.IPFFTTransform_InverseFastHilbertTransform(self, *args)

    def SetupSTFFT(self, *args):
        return _IMath.IPFFTTransform_SetupSTFFT(self, *args)

    def STFFT_C(self, *args):
        return _IMath.IPFFTTransform_STFFT_C(self, *args)

    def GetSTFFTSpectrumSize(self, *args):
        return _IMath.IPFFTTransform_GetSTFFTSpectrumSize(self, *args)

    def STFFT(self, *args):
        return _IMath.IPFFTTransform_STFFT(self, *args)
IPFFTTransform_swigregister = _IMath.IPFFTTransform_swigregister
IPFFTTransform_swigregister(IPFFTTransform)

class IPWaveletTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPWaveletTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPWaveletTransform, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPWaveletTransform
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPWaveletTransform(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetWaveletType(self, *args):
        return _IMath.IPWaveletTransform_SetWaveletType(self, *args)

    def ForwardWavelet1D(self, *args):
        return _IMath.IPWaveletTransform_ForwardWavelet1D(self, *args)

    def InverseWavelet1D(self, *args):
        return _IMath.IPWaveletTransform_InverseWavelet1D(self, *args)

    def ForwardWavelet2D(self, *args):
        return _IMath.IPWaveletTransform_ForwardWavelet2D(self, *args)

    def InverseWavelet2D(self, *args):
        return _IMath.IPWaveletTransform_InverseWavelet2D(self, *args)

    def ForwardPacketTransform(self, *args):
        return _IMath.IPWaveletTransform_ForwardPacketTransform(self, *args)

    def InversePacketTransform(self, *args):
        return _IMath.IPWaveletTransform_InversePacketTransform(self, *args)

    def ForwardPacketTransform2D(self, *args):
        return _IMath.IPWaveletTransform_ForwardPacketTransform2D(self, *args)

    def InversePacketTransform2D(self, *args):
        return _IMath.IPWaveletTransform_InversePacketTransform2D(self, *args)

    def SetCWaveletType(self, *args):
        return _IMath.IPWaveletTransform_SetCWaveletType(self, *args)

    def ForwardWavelet(self, *args):
        return _IMath.IPWaveletTransform_ForwardWavelet(self, *args)
IPWaveletTransform_swigregister = _IMath.IPWaveletTransform_swigregister
IPWaveletTransform_swigregister(IPWaveletTransform)

class IPFIRFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPFIRFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPFIRFilter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPFIRFilter
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPFIRFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Filter(self, *args):
        return _IMath.IPFIRFilter_Filter(self, *args)

    def GetOutput(self, *args):
        return _IMath.IPFIRFilter_GetOutput(self, *args)

    def UpdateFIRFilter(self, *args):
        return _IMath.IPFIRFilter_UpdateFIRFilter(self, *args)

    def GetFIRCoef(self, *args):
        return _IMath.IPFIRFilter_GetFIRCoef(self, *args)
IPFIRFilter_swigregister = _IMath.IPFIRFilter_swigregister
IPFIRFilter_swigregister(IPFIRFilter)

class IPIIRFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPIIRFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPIIRFilter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPIIRFilter
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPIIRFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Filter(self, *args):
        return _IMath.IPIIRFilter_Filter(self, *args)

    def GetOutput(self, *args):
        return _IMath.IPIIRFilter_GetOutput(self, *args)

    def UpdateIIRFilter(self, *args):
        return _IMath.IPIIRFilter_UpdateIIRFilter(self, *args)

    def GetIIRCoef(self, *args):
        return _IMath.IPIIRFilter_GetIIRCoef(self, *args)
IPIIRFilter_swigregister = _IMath.IPIIRFilter_swigregister
IPIIRFilter_swigregister(IPIIRFilter)

class IPImageProcess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPImageProcess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPImageProcess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IMath.new_IPImageProcess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IMath.delete_IPImageProcess
    __del__ = lambda self: None

    def FilterData(self, *args):
        return _IMath.IPImageProcess_FilterData(self, *args)

    def SetFilterType(self, *args):
        return _IMath.IPImageProcess_SetFilterType(self, *args)

    def SetInvalidData(self, *args):
        return _IMath.IPImageProcess_SetInvalidData(self, *args)
IPImageProcess_swigregister = _IMath.IPImageProcess_swigregister
IPImageProcess_swigregister(IPImageProcess)

class IPAlgebra(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAlgebra, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAlgebra, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPAlgebra
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPAlgebra(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CMultiplyMatrix(self, *args):
        return _IMath.IPAlgebra_CMultiplyMatrix(self, *args)

    def MultiplyMatrix(self, *args):
        return _IMath.IPAlgebra_MultiplyMatrix(self, *args)

    def Determinant(self, *args):
        return _IMath.IPAlgebra_Determinant(self, *args)

    def CDeterminant(self, *args):
        return _IMath.IPAlgebra_CDeterminant(self, *args)

    def CDeterminantHermitianPos(self, *args):
        return _IMath.IPAlgebra_CDeterminantHermitianPos(self, *args)

    def CInverse(self, *args):
        return _IMath.IPAlgebra_CInverse(self, *args)

    def Inverse(self, *args):
        return _IMath.IPAlgebra_Inverse(self, *args)

    def InversesymmetricPos(self, *args):
        return _IMath.IPAlgebra_InversesymmetricPos(self, *args)

    def LinearEqs(self, *args):
        return _IMath.IPAlgebra_LinearEqs(self, *args)

    def LinearEqsRefine(self, *args):
        return _IMath.IPAlgebra_LinearEqsRefine(self, *args)

    def CLinearEqs(self, *args):
        return _IMath.IPAlgebra_CLinearEqs(self, *args)

    def CLinearEqsRefine(self, *args):
        return _IMath.IPAlgebra_CLinearEqsRefine(self, *args)

    def LinearSymmetricEqsRefine(self, *args):
        return _IMath.IPAlgebra_LinearSymmetricEqsRefine(self, *args)

    def LinearSymmetricEqs(self, *args):
        return _IMath.IPAlgebra_LinearSymmetricEqs(self, *args)

    def LinearSymmetricPosEqsRefine(self, *args):
        return _IMath.IPAlgebra_LinearSymmetricPosEqsRefine(self, *args)

    def LinearSymmetricPosEqs(self, *args):
        return _IMath.IPAlgebra_LinearSymmetricPosEqs(self, *args)

    def CLinearHermitianPosEqsRefine(self, *args):
        return _IMath.IPAlgebra_CLinearHermitianPosEqsRefine(self, *args)

    def CLinearHermitianPosEqs(self, *args):
        return _IMath.IPAlgebra_CLinearHermitianPosEqs(self, *args)

    def CLinearHermitianEqsRefine(self, *args):
        return _IMath.IPAlgebra_CLinearHermitianEqsRefine(self, *args)

    def CLinearHermitianEqs(self, *args):
        return _IMath.IPAlgebra_CLinearHermitianEqs(self, *args)

    def EigenValue(self, *args):
        return _IMath.IPAlgebra_EigenValue(self, *args)

    def CEigenValue(self, *args):
        return _IMath.IPAlgebra_CEigenValue(self, *args)

    def EigenValueVectorSymmetric(self, *args):
        return _IMath.IPAlgebra_EigenValueVectorSymmetric(self, *args)

    def CEigenValueVectorHermitian(self, *args):
        return _IMath.IPAlgebra_CEigenValueVectorHermitian(self, *args)

    def EigenValueHermitian(self, *args):
        return _IMath.IPAlgebra_EigenValueHermitian(self, *args)

    def EigenValueVector(self, *args):
        return _IMath.IPAlgebra_EigenValueVector(self, *args)

    def CEigenValueVector(self, *args):
        return _IMath.IPAlgebra_CEigenValueVector(self, *args)

    def LUFactorization(self, *args):
        return _IMath.IPAlgebra_LUFactorization(self, *args)

    def CLUFactorization(self, *args):
        return _IMath.IPAlgebra_CLUFactorization(self, *args)

    def CLUSolve(self, *args):
        return _IMath.IPAlgebra_CLUSolve(self, *args)

    def LUSolve(self, *args):
        return _IMath.IPAlgebra_LUSolve(self, *args)

    def LUDeterminant(self, *args):
        return _IMath.IPAlgebra_LUDeterminant(self, *args)

    def CLUDeterminant(self, *args):
        return _IMath.IPAlgebra_CLUDeterminant(self, *args)

    def CLUHermitianFactorization(self, *args):
        return _IMath.IPAlgebra_CLUHermitianFactorization(self, *args)

    def CholeskyFactorization(self, *args):
        return _IMath.IPAlgebra_CholeskyFactorization(self, *args)

    def LeastSquares(self, *args):
        return _IMath.IPAlgebra_LeastSquares(self, *args)

    def LeastSquaresRefinement(self, *args):
        return _IMath.IPAlgebra_LeastSquaresRefinement(self, *args)

    def QRDecomposition(self, *args):
        return _IMath.IPAlgebra_QRDecomposition(self, *args)

    def SingularValueDecomposition(self, *args):
        return _IMath.IPAlgebra_SingularValueDecomposition(self, *args)

    def CSingularValueDecomposition(self, *args):
        return _IMath.IPAlgebra_CSingularValueDecomposition(self, *args)
IPAlgebra_swigregister = _IMath.IPAlgebra_swigregister
IPAlgebra_swigregister(IPAlgebra)

class IPFunctions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPFunctions, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPFunctions
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPFunctions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ImpulseWave(self, *args):
        return _IMath.IPFunctions_ImpulseWave(self, *args)

    def PulseWave(self, *args):
        return _IMath.IPFunctions_PulseWave(self, *args)

    def RampWave(self, *args):
        return _IMath.IPFunctions_RampWave(self, *args)

    def TriangleWave(self, *args):
        return _IMath.IPFunctions_TriangleWave(self, *args)

    def SineWave(self, *args):
        return _IMath.IPFunctions_SineWave(self, *args)

    def ChirpWave(self, *args):
        return _IMath.IPFunctions_ChirpWave(self, *args)

    def SawtoothWave(self, *args):
        return _IMath.IPFunctions_SawtoothWave(self, *args)

    def SincWave(self, *args):
        return _IMath.IPFunctions_SincWave(self, *args)

    def SquareWave(self, *args):
        return _IMath.IPFunctions_SquareWave(self, *args)

    def ArbitraryWave(self, *args):
        return _IMath.IPFunctions_ArbitraryWave(self, *args)

    def Gaussian(self, *args):
        return _IMath.IPFunctions_Gaussian(self, *args)

    def GaussianSine(self, *args):
        return _IMath.IPFunctions_GaussianSine(self, *args)

    def UniformNoiseWave(self, *args):
        return _IMath.IPFunctions_UniformNoiseWave(self, *args)

    def WhiteNoiseWave(self, *args):
        return _IMath.IPFunctions_WhiteNoiseWave(self, *args)

    def GaussNoiseWave(self, *args):
        return _IMath.IPFunctions_GaussNoiseWave(self, *args)

    def SetRandomSeed(self, *args):
        return _IMath.IPFunctions_SetRandomSeed(self, *args)

    def Random(self, *args):
        return _IMath.IPFunctions_Random(self, *args)

    def GaussianRandom(self, *args):
        return _IMath.IPFunctions_GaussianRandom(self, *args)

    def ExpRandom(self, *args):
        return _IMath.IPFunctions_ExpRandom(self, *args)

    def PinkRandom(self, *args):
        return _IMath.IPFunctions_PinkRandom(self, *args)

    def Bsj0(self, *args):
        return _IMath.IPFunctions_Bsj0(self, *args)

    def Bsj1(self, *args):
        return _IMath.IPFunctions_Bsj1(self, *args)

    def Bsi0(self, *args):
        return _IMath.IPFunctions_Bsi0(self, *args)

    def Bsi1(self, *args):
        return _IMath.IPFunctions_Bsi1(self, *args)

    def Bsy0(self, *args):
        return _IMath.IPFunctions_Bsy0(self, *args)

    def Bsy1(self, *args):
        return _IMath.IPFunctions_Bsy1(self, *args)

    def Bsk0(self, *args):
        return _IMath.IPFunctions_Bsk0(self, *args)

    def Bsk1(self, *args):
        return _IMath.IPFunctions_Bsk1(self, *args)

    def Bsi0e(self, *args):
        return _IMath.IPFunctions_Bsi0e(self, *args)

    def Bsi1e(self, *args):
        return _IMath.IPFunctions_Bsi1e(self, *args)

    def Bsk0e(self, *args):
        return _IMath.IPFunctions_Bsk0e(self, *args)

    def Bsk1e(self, *args):
        return _IMath.IPFunctions_Bsk1e(self, *args)

    def Bsjn(self, *args):
        return _IMath.IPFunctions_Bsjn(self, *args)

    def Bsjns(self, *args):
        return _IMath.IPFunctions_Bsjns(self, *args)

    def Bsjv(self, *args):
        return _IMath.IPFunctions_Bsjv(self, *args)

    def Bsjs(self, *args):
        return _IMath.IPFunctions_Bsjs(self, *args)

    def Bsyv(self, *args):
        return _IMath.IPFunctions_Bsyv(self, *args)

    def Bsys(self, *args):
        return _IMath.IPFunctions_Bsys(self, *args)

    def Bskv(self, *args):
        return _IMath.IPFunctions_Bskv(self, *args)

    def Bsks(self, *args):
        return _IMath.IPFunctions_Bsks(self, *args)

    def Bsin(self, *args):
        return _IMath.IPFunctions_Bsin(self, *args)

    def Bsins(self, *args):
        return _IMath.IPFunctions_Bsins(self, *args)

    def Bsiev(self, *args):
        return _IMath.IPFunctions_Bsiev(self, *args)

    def Bsies(self, *args):
        return _IMath.IPFunctions_Bsies(self, *args)

    def Bskev(self, *args):
        return _IMath.IPFunctions_Bskev(self, *args)

    def Bskes(self, *args):
        return _IMath.IPFunctions_Bskes(self, *args)

    def Bsiv(self, *args):
        return _IMath.IPFunctions_Bsiv(self, *args)

    def Bsis(self, *args):
        return _IMath.IPFunctions_Bsis(self, *args)

    def CBins(self, *args):
        return _IMath.IPFunctions_CBins(self, *args)

    def CBjns(self, *args):
        return _IMath.IPFunctions_CBjns(self, *args)

    def Bei0(self, *args):
        return _IMath.IPFunctions_Bei0(self, *args)

    def Bei1(self, *args):
        return _IMath.IPFunctions_Bei1(self, *args)

    def Ber0(self, *args):
        return _IMath.IPFunctions_Ber0(self, *args)

    def Ber1(self, *args):
        return _IMath.IPFunctions_Ber1(self, *args)

    def Kei0(self, *args):
        return _IMath.IPFunctions_Kei0(self, *args)

    def Kei1(self, *args):
        return _IMath.IPFunctions_Kei1(self, *args)

    def Ker0(self, *args):
        return _IMath.IPFunctions_Ker0(self, *args)

    def Ker1(self, *args):
        return _IMath.IPFunctions_Ker1(self, *args)

    def Beip0(self, *args):
        return _IMath.IPFunctions_Beip0(self, *args)

    def Berp0(self, *args):
        return _IMath.IPFunctions_Berp0(self, *args)

    def Keip0(self, *args):
        return _IMath.IPFunctions_Keip0(self, *args)

    def Kerp0(self, *args):
        return _IMath.IPFunctions_Kerp0(self, *args)

    def Ai(self, *args):
        return _IMath.IPFunctions_Ai(self, *args)

    def Aie(self, *args):
        return _IMath.IPFunctions_Aie(self, *args)

    def Aid(self, *args):
        return _IMath.IPFunctions_Aid(self, *args)

    def Aide(self, *args):
        return _IMath.IPFunctions_Aide(self, *args)

    def Bi(self, *args):
        return _IMath.IPFunctions_Bi(self, *args)

    def Bie(self, *args):
        return _IMath.IPFunctions_Bie(self, *args)

    def Bid(self, *args):
        return _IMath.IPFunctions_Bid(self, *args)

    def Bide(self, *args):
        return _IMath.IPFunctions_Bide(self, *args)

    def Frenels(self, *args):
        return _IMath.IPFunctions_Frenels(self, *args)

    def Frenelc(self, *args):
        return _IMath.IPFunctions_Frenelc(self, *args)

    def Frenel(self, *args):
        return _IMath.IPFunctions_Frenel(self, *args)

    def EllipticF(self, *args):
        return _IMath.IPFunctions_EllipticF(self, *args)

    def EllipticE(self, *args):
        return _IMath.IPFunctions_EllipticE(self, *args)

    def EllipticPI(self, *args):
        return _IMath.IPFunctions_EllipticPI(self, *args)

    def Rf(self, *args):
        return _IMath.IPFunctions_Rf(self, *args)

    def Rd(self, *args):
        return _IMath.IPFunctions_Rd(self, *args)

    def Rj(self, *args):
        return _IMath.IPFunctions_Rj(self, *args)

    def Rc(self, *args):
        return _IMath.IPFunctions_Rc(self, *args)

    def Sn(self, *args):
        return _IMath.IPFunctions_Sn(self, *args)

    def Cn(self, *args):
        return _IMath.IPFunctions_Cn(self, *args)

    def Dn(self, *args):
        return _IMath.IPFunctions_Dn(self, *args)

    def Sncndn(self, *args):
        return _IMath.IPFunctions_Sncndn(self, *args)

    def Legendre(self, *args):
        return _IMath.IPFunctions_Legendre(self, *args)

    def Erf(self, *args):
        return _IMath.IPFunctions_Erf(self, *args)

    def Erfc(self, *args):
        return _IMath.IPFunctions_Erfc(self, *args)

    def Erfce(self, *args):
        return _IMath.IPFunctions_Erfce(self, *args)

    def Erfi(self, *args):
        return _IMath.IPFunctions_Erfi(self, *args)

    def Erfci(self, *args):
        return _IMath.IPFunctions_Erfci(self, *args)

    def CErfe(self, *args):
        return _IMath.IPFunctions_CErfe(self, *args)

    def E1(self, *args):
        return _IMath.IPFunctions_E1(self, *args)

    def Ei(self, *args):
        return _IMath.IPFunctions_Ei(self, *args)

    def Ene(self, *args):
        return _IMath.IPFunctions_Ene(self, *args)

    def Gamma(self, *args):
        return _IMath.IPFunctions_Gamma(self, *args)

    def Gamr(self, *args):
        return _IMath.IPFunctions_Gamr(self, *args)

    def Gami(self, *args):
        return _IMath.IPFunctions_Gami(self, *args)

    def Gamic(self, *args):
        return _IMath.IPFunctions_Gamic(self, *args)

    def Gamit(self, *args):
        return _IMath.IPFunctions_Gamit(self, *args)

    def Lngam(self, *args):
        return _IMath.IPFunctions_Lngam(self, *args)

    def Psi(self, *args):
        return _IMath.IPFunctions_Psi(self, *args)

    def Beta(self, *args):
        return _IMath.IPFunctions_Beta(self, *args)

    def Betai(self, *args):
        return _IMath.IPFunctions_Betai(self, *args)

    def Betacf(self, *args):
        return _IMath.IPFunctions_Betacf(self, *args)

    def LBeta(self, *args):
        return _IMath.IPFunctions_LBeta(self, *args)

    def Poch(self, *args):
        return _IMath.IPFunctions_Poch(self, *args)

    def Poch1(self, *args):
        return _IMath.IPFunctions_Poch1(self, *args)

    def Lngams(self, *args):
        return _IMath.IPFunctions_Lngams(self, *args)

    def Binom(self, *args):
        return _IMath.IPFunctions_Binom(self, *args)

    def Gamlm(self, *args):
        return _IMath.IPFunctions_Gamlm(self, *args)

    def Fac(self, *args):
        return _IMath.IPFunctions_Fac(self, *args)

    def CLBeta(self, *args):
        return _IMath.IPFunctions_CLBeta(self, *args)

    def CGamma(self, *args):
        return _IMath.IPFunctions_CGamma(self, *args)

    def CGamr(self, *args):
        return _IMath.IPFunctions_CGamr(self, *args)

    def CBeta(self, *args):
        return _IMath.IPFunctions_CBeta(self, *args)

    def CLngam(self, *args):
        return _IMath.IPFunctions_CLngam(self, *args)

    def CPsi(self, *args):
        return _IMath.IPFunctions_CPsi(self, *args)

    def Shi(self, *args):
        return _IMath.IPFunctions_Shi(self, *args)

    def Si(self, *args):
        return _IMath.IPFunctions_Si(self, *args)

    def Ci(self, *args):
        return _IMath.IPFunctions_Ci(self, *args)

    def Chi(self, *args):
        return _IMath.IPFunctions_Chi(self, *args)

    def Cinh(self, *args):
        return _IMath.IPFunctions_Cinh(self, *args)

    def Cin(self, *args):
        return _IMath.IPFunctions_Cin(self, *args)

    def Exprl(self, *args):
        return _IMath.IPFunctions_Exprl(self, *args)

    def CExprl(self, *args):
        return _IMath.IPFunctions_CExprl(self, *args)

    def CCot(self, *args):
        return _IMath.IPFunctions_CCot(self, *args)

    def Li(self, *args):
        return _IMath.IPFunctions_Li(self, *args)

    def Lnrel(self, *args):
        return _IMath.IPFunctions_Lnrel(self, *args)

    def CLnrel(self, *args):
        return _IMath.IPFunctions_CLnrel(self, *args)

    def Daws(self, *args):
        return _IMath.IPFunctions_Daws(self, *args)
IPFunctions_swigregister = _IMath.IPFunctions_swigregister
IPFunctions_swigregister(IPFunctions)

class IPInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPInterpolation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPInterpolation
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPInterpolation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def InterpolateCSpline(self, *args):
        return _IMath.IPInterpolation_InterpolateCSpline(self, *args)

    def InterpolateLinear(self, *args):
        return _IMath.IPInterpolation_InterpolateLinear(self, *args)

    def InterpolateSurf(self, *args):
        return _IMath.IPInterpolation_InterpolateSurf(self, *args)

    def InterpolateBSpline(self, *args):
        return _IMath.IPInterpolation_InterpolateBSpline(self, *args)

    def InterpolateQuadratic(self, *args):
        return _IMath.IPInterpolation_InterpolateQuadratic(self, *args)
IPInterpolation_swigregister = _IMath.IPInterpolation_swigregister
IPInterpolation_swigregister(IPInterpolation)

fittingAlgorith_LeastSquare = _IMath.fittingAlgorith_LeastSquare
class IPFitting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPFitting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPFitting, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _IMath.delete_IPFitting
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _IMath.new_IPFitting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LeastSquareLinear(self, *args):
        return _IMath.IPFitting_LeastSquareLinear(self, *args)

    def LeastSquarePoly(self, *args):
        return _IMath.IPFitting_LeastSquarePoly(self, *args)

    def LeastSquareSpline(self, *args):
        return _IMath.IPFitting_LeastSquareSpline(self, *args)

    def SplineFun(self, *args):
        return _IMath.IPFitting_SplineFun(self, *args)

    def LinearFun(self, *args):
        return _IMath.IPFitting_LinearFun(self, *args)

    def LinearFit(self, *args):
        return _IMath.IPFitting_LinearFit(self, *args)

    def QuadraticFun(self, *args):
        return _IMath.IPFitting_QuadraticFun(self, *args)

    def QuadraticFit(self, *args):
        return _IMath.IPFitting_QuadraticFit(self, *args)

    def CubicFun(self, *args):
        return _IMath.IPFitting_CubicFun(self, *args)

    def CubicFit(self, *args):
        return _IMath.IPFitting_CubicFit(self, *args)

    def GaussianFun(self, *args):
        return _IMath.IPFitting_GaussianFun(self, *args)

    def GaussianFit(self, *args):
        return _IMath.IPFitting_GaussianFit(self, *args)

    def GaussianFit1(self, *args):
        return _IMath.IPFitting_GaussianFit1(self, *args)

    def ModifiedGaussianFun(self, *args):
        return _IMath.IPFitting_ModifiedGaussianFun(self, *args)

    def ModifedGaussianFit(self, *args):
        return _IMath.IPFitting_ModifedGaussianFit(self, *args)

    def ModifedGaussianFit1(self, *args):
        return _IMath.IPFitting_ModifedGaussianFit1(self, *args)

    def LorentzianFun(self, *args):
        return _IMath.IPFitting_LorentzianFun(self, *args)

    def LorentzianFit(self, *args):
        return _IMath.IPFitting_LorentzianFit(self, *args)

    def LorentzianFit1(self, *args):
        return _IMath.IPFitting_LorentzianFit1(self, *args)

    def VoigtFun(self, *args):
        return _IMath.IPFitting_VoigtFun(self, *args)

    def VoigtFit(self, *args):
        return _IMath.IPFitting_VoigtFit(self, *args)

    def LogNormalFun(self, *args):
        return _IMath.IPFitting_LogNormalFun(self, *args)

    def LogNormalFit(self, *args):
        return _IMath.IPFitting_LogNormalFit(self, *args)

    def LogNormalFit1(self, *args):
        return _IMath.IPFitting_LogNormalFit1(self, *args)

    def SigmoidalFun(self, *args):
        return _IMath.IPFitting_SigmoidalFun(self, *args)

    def SigmoidalFit(self, *args):
        return _IMath.IPFitting_SigmoidalFit(self, *args)

    def SigmoidalFit1(self, *args):
        return _IMath.IPFitting_SigmoidalFit1(self, *args)

    def SigmoidalFit2(self, *args):
        return _IMath.IPFitting_SigmoidalFit2(self, *args)

    def LogisticFun(self, *args):
        return _IMath.IPFitting_LogisticFun(self, *args)

    def LogisticFit(self, *args):
        return _IMath.IPFitting_LogisticFit(self, *args)

    def LogisticFit1(self, *args):
        return _IMath.IPFitting_LogisticFit1(self, *args)

    def HillFun(self, *args):
        return _IMath.IPFitting_HillFun(self, *args)

    def HillFit(self, *args):
        return _IMath.IPFitting_HillFit(self, *args)

    def HillFit1(self, *args):
        return _IMath.IPFitting_HillFit1(self, *args)

    def ChapmanFun(self, *args):
        return _IMath.IPFitting_ChapmanFun(self, *args)

    def ChapmanFit(self, *args):
        return _IMath.IPFitting_ChapmanFit(self, *args)

    def ChapmanFit1(self, *args):
        return _IMath.IPFitting_ChapmanFit1(self, *args)

    def ExpDecayFun(self, *args):
        return _IMath.IPFitting_ExpDecayFun(self, *args)

    def ExpDecayFit(self, *args):
        return _IMath.IPFitting_ExpDecayFit(self, *args)

    def ExpDecayFit1(self, *args):
        return _IMath.IPFitting_ExpDecayFit1(self, *args)

    def Exp2DecayFun(self, *args):
        return _IMath.IPFitting_Exp2DecayFun(self, *args)

    def Exp2DecayFit(self, *args):
        return _IMath.IPFitting_Exp2DecayFit(self, *args)

    def Exp2DecayFit1(self, *args):
        return _IMath.IPFitting_Exp2DecayFit1(self, *args)

    def Exp3DecayFun(self, *args):
        return _IMath.IPFitting_Exp3DecayFun(self, *args)

    def Exp3DecayFit(self, *args):
        return _IMath.IPFitting_Exp3DecayFit(self, *args)

    def Exp3DecayFit1(self, *args):
        return _IMath.IPFitting_Exp3DecayFit1(self, *args)

    def ExpRiseFun(self, *args):
        return _IMath.IPFitting_ExpRiseFun(self, *args)

    def ExpRiseFit(self, *args):
        return _IMath.IPFitting_ExpRiseFit(self, *args)

    def ExpRiseFit1(self, *args):
        return _IMath.IPFitting_ExpRiseFit1(self, *args)

    def Exp2RiseFun(self, *args):
        return _IMath.IPFitting_Exp2RiseFun(self, *args)

    def Exp2RiseFit(self, *args):
        return _IMath.IPFitting_Exp2RiseFit(self, *args)

    def Exp2RiseFit1(self, *args):
        return _IMath.IPFitting_Exp2RiseFit1(self, *args)

    def WaveformFun(self, *args):
        return _IMath.IPFitting_WaveformFun(self, *args)

    def WaveformDecayFun(self, *args):
        return _IMath.IPFitting_WaveformDecayFun(self, *args)

    def WaveformFit(self, *args):
        return _IMath.IPFitting_WaveformFit(self, *args)

    def WaveformFit1(self, *args):
        return _IMath.IPFitting_WaveformFit1(self, *args)

    def WaveformDecayFit(self, *args):
        return _IMath.IPFitting_WaveformDecayFit(self, *args)

    def WaveformDecayFit1(self, *args):
        return _IMath.IPFitting_WaveformDecayFit1(self, *args)

    def PowerFun(self, *args):
        return _IMath.IPFitting_PowerFun(self, *args)

    def PowerFit(self, *args):
        return _IMath.IPFitting_PowerFit(self, *args)

    def PowerFit1(self, *args):
        return _IMath.IPFitting_PowerFit1(self, *args)

    def SymPowerFun(self, *args):
        return _IMath.IPFitting_SymPowerFun(self, *args)

    def SymPowerFit(self, *args):
        return _IMath.IPFitting_SymPowerFit(self, *args)

    def SymPowerFit1(self, *args):
        return _IMath.IPFitting_SymPowerFit1(self, *args)

    def Rational1Fun(self, *args):
        return _IMath.IPFitting_Rational1Fun(self, *args)

    def RationalFit(self, *args):
        return _IMath.IPFitting_RationalFit(self, *args)

    def Rational2Fun(self, *args):
        return _IMath.IPFitting_Rational2Fun(self, *args)

    def RationalFit2(self, *args):
        return _IMath.IPFitting_RationalFit2(self, *args)

    def Rational3Fun(self, *args):
        return _IMath.IPFitting_Rational3Fun(self, *args)

    def RationalFit3(self, *args):
        return _IMath.IPFitting_RationalFit3(self, *args)

    def Rational4Fun(self, *args):
        return _IMath.IPFitting_Rational4Fun(self, *args)

    def RationalFit4(self, *args):
        return _IMath.IPFitting_RationalFit4(self, *args)

    def Rational5Fun(self, *args):
        return _IMath.IPFitting_Rational5Fun(self, *args)

    def RationalFit5(self, *args):
        return _IMath.IPFitting_RationalFit5(self, *args)

    def Rational6Fun(self, *args):
        return _IMath.IPFitting_Rational6Fun(self, *args)

    def RationalFit6(self, *args):
        return _IMath.IPFitting_RationalFit6(self, *args)

    def Rational7Fun(self, *args):
        return _IMath.IPFitting_Rational7Fun(self, *args)

    def RationalFit7(self, *args):
        return _IMath.IPFitting_RationalFit7(self, *args)

    def Logarithm1Fun(self, *args):
        return _IMath.IPFitting_Logarithm1Fun(self, *args)

    def LogarithmFit(self, *args):
        return _IMath.IPFitting_LogarithmFit(self, *args)

    def Logarithm2Fun(self, *args):
        return _IMath.IPFitting_Logarithm2Fun(self, *args)

    def LogarithmFit2(self, *args):
        return _IMath.IPFitting_LogarithmFit2(self, *args)

    def Logarithm3Fun(self, *args):
        return _IMath.IPFitting_Logarithm3Fun(self, *args)

    def LogarithmFit3(self, *args):
        return _IMath.IPFitting_LogarithmFit3(self, *args)

    def Logarithm4Fun(self, *args):
        return _IMath.IPFitting_Logarithm4Fun(self, *args)

    def LogarithmFit4(self, *args):
        return _IMath.IPFitting_LogarithmFit4(self, *args)

    def Logarithm5Fun(self, *args):
        return _IMath.IPFitting_Logarithm5Fun(self, *args)

    def LogarithmFit5(self, *args):
        return _IMath.IPFitting_LogarithmFit5(self, *args)

    def User1Fun(self, *args):
        return _IMath.IPFitting_User1Fun(self, *args)

    def User1Fit(self, *args):
        return _IMath.IPFitting_User1Fit(self, *args)

    def User2Fun(self, *args):
        return _IMath.IPFitting_User2Fun(self, *args)

    def User2Fit(self, *args):
        return _IMath.IPFitting_User2Fit(self, *args)

    def User3Fun(self, *args):
        return _IMath.IPFitting_User3Fun(self, *args)

    def User3Fit(self, *args):
        return _IMath.IPFitting_User3Fit(self, *args)

    def User4Fun(self, *args):
        return _IMath.IPFitting_User4Fun(self, *args)

    def User4Fit(self, *args):
        return _IMath.IPFitting_User4Fit(self, *args)

    def User5Fun(self, *args):
        return _IMath.IPFitting_User5Fun(self, *args)

    def User5Fit(self, *args):
        return _IMath.IPFitting_User5Fit(self, *args)

    def UserFit(self, *args):
        return _IMath.IPFitting_UserFit(self, *args)

    def LinearFun2D(self, *args):
        return _IMath.IPFitting_LinearFun2D(self, *args)

    def LinearFit2D(self, *args):
        return _IMath.IPFitting_LinearFit2D(self, *args)

    def QuadraticFun2D(self, *args):
        return _IMath.IPFitting_QuadraticFun2D(self, *args)

    def QuadraticFit2D(self, *args):
        return _IMath.IPFitting_QuadraticFit2D(self, *args)

    def CubicFun2D(self, *args):
        return _IMath.IPFitting_CubicFun2D(self, *args)

    def CubicFit2D(self, *args):
        return _IMath.IPFitting_CubicFit2D(self, *args)

    def GaussianFun2D(self, *args):
        return _IMath.IPFitting_GaussianFun2D(self, *args)

    def GaussianFit2D(self, *args):
        return _IMath.IPFitting_GaussianFit2D(self, *args)

    def GaussianFit2D1(self, *args):
        return _IMath.IPFitting_GaussianFit2D1(self, *args)

    def ModifiedGaussianFun2D(self, *args):
        return _IMath.IPFitting_ModifiedGaussianFun2D(self, *args)

    def ModifedGaussianFit2D(self, *args):
        return _IMath.IPFitting_ModifedGaussianFit2D(self, *args)

    def ModifedGaussianFit2D1(self, *args):
        return _IMath.IPFitting_ModifedGaussianFit2D1(self, *args)

    def LorentzianFun2D(self, *args):
        return _IMath.IPFitting_LorentzianFun2D(self, *args)

    def LorentzianFit2D(self, *args):
        return _IMath.IPFitting_LorentzianFit2D(self, *args)

    def LorentzianFit2D1(self, *args):
        return _IMath.IPFitting_LorentzianFit2D1(self, *args)

    def LogNormalFun2D(self, *args):
        return _IMath.IPFitting_LogNormalFun2D(self, *args)

    def LogNormalFit2D(self, *args):
        return _IMath.IPFitting_LogNormalFit2D(self, *args)

    def LogNormalFit2D1(self, *args):
        return _IMath.IPFitting_LogNormalFit2D1(self, *args)

    def SigmoidalFit2D(self, *args):
        return _IMath.IPFitting_SigmoidalFit2D(self, *args)

    def SigmoidalFit2D1(self, *args):
        return _IMath.IPFitting_SigmoidalFit2D1(self, *args)

    def SigmoidalFun2D(self, *args):
        return _IMath.IPFitting_SigmoidalFun2D(self, *args)

    def SigmoidalFit2D2(self, *args):
        return _IMath.IPFitting_SigmoidalFit2D2(self, *args)

    def LogisticFun2D(self, *args):
        return _IMath.IPFitting_LogisticFun2D(self, *args)

    def LogisticFit2D(self, *args):
        return _IMath.IPFitting_LogisticFit2D(self, *args)

    def LogisticFit2D1(self, *args):
        return _IMath.IPFitting_LogisticFit2D1(self, *args)

    def ExpDecayFun2D(self, *args):
        return _IMath.IPFitting_ExpDecayFun2D(self, *args)

    def ExpDecayFit2D(self, *args):
        return _IMath.IPFitting_ExpDecayFit2D(self, *args)

    def ExpDecayFit2D1(self, *args):
        return _IMath.IPFitting_ExpDecayFit2D1(self, *args)

    def Exp2DecayFun2D(self, *args):
        return _IMath.IPFitting_Exp2DecayFun2D(self, *args)

    def Exp2DecayFit2D(self, *args):
        return _IMath.IPFitting_Exp2DecayFit2D(self, *args)

    def Exp2DecayFit2D1(self, *args):
        return _IMath.IPFitting_Exp2DecayFit2D1(self, *args)

    def ExpRiseFun2D(self, *args):
        return _IMath.IPFitting_ExpRiseFun2D(self, *args)

    def ExpRiseFit2D(self, *args):
        return _IMath.IPFitting_ExpRiseFit2D(self, *args)

    def ExpRiseFit2D1(self, *args):
        return _IMath.IPFitting_ExpRiseFit2D1(self, *args)

    def Exp2RiseFun2D(self, *args):
        return _IMath.IPFitting_Exp2RiseFun2D(self, *args)

    def Exp2RiseFit2D(self, *args):
        return _IMath.IPFitting_Exp2RiseFit2D(self, *args)

    def Exp2RiseFit2D1(self, *args):
        return _IMath.IPFitting_Exp2RiseFit2D1(self, *args)

    def WaveformFun2D(self, *args):
        return _IMath.IPFitting_WaveformFun2D(self, *args)

    def WaveformFit2D(self, *args):
        return _IMath.IPFitting_WaveformFit2D(self, *args)

    def WaveformFit2D1(self, *args):
        return _IMath.IPFitting_WaveformFit2D1(self, *args)

    def WaveformDecayFun2D(self, *args):
        return _IMath.IPFitting_WaveformDecayFun2D(self, *args)

    def WaveformDecayFit2D(self, *args):
        return _IMath.IPFitting_WaveformDecayFit2D(self, *args)

    def WaveformDecayFit2D1(self, *args):
        return _IMath.IPFitting_WaveformDecayFit2D1(self, *args)

    def PowerFun2D(self, *args):
        return _IMath.IPFitting_PowerFun2D(self, *args)

    def PowerFit2D(self, *args):
        return _IMath.IPFitting_PowerFit2D(self, *args)

    def PowerFit2D1(self, *args):
        return _IMath.IPFitting_PowerFit2D1(self, *args)

    def SymPowerFun2D(self, *args):
        return _IMath.IPFitting_SymPowerFun2D(self, *args)

    def SymPowerFit2D(self, *args):
        return _IMath.IPFitting_SymPowerFit2D(self, *args)

    def SymPowerFit2D1(self, *args):
        return _IMath.IPFitting_SymPowerFit2D1(self, *args)

    def Rational1Fun2D(self, *args):
        return _IMath.IPFitting_Rational1Fun2D(self, *args)

    def RationalFit2D(self, *args):
        return _IMath.IPFitting_RationalFit2D(self, *args)

    def Rational2Fun2D(self, *args):
        return _IMath.IPFitting_Rational2Fun2D(self, *args)

    def RationalFit2D2(self, *args):
        return _IMath.IPFitting_RationalFit2D2(self, *args)

    def Rational3Fun2D(self, *args):
        return _IMath.IPFitting_Rational3Fun2D(self, *args)

    def RationalFit2D3(self, *args):
        return _IMath.IPFitting_RationalFit2D3(self, *args)

    def Rational4Fun2D(self, *args):
        return _IMath.IPFitting_Rational4Fun2D(self, *args)

    def RationalFit2D4(self, *args):
        return _IMath.IPFitting_RationalFit2D4(self, *args)

    def Rational5Fun2D(self, *args):
        return _IMath.IPFitting_Rational5Fun2D(self, *args)

    def RationalFit2D5(self, *args):
        return _IMath.IPFitting_RationalFit2D5(self, *args)

    def Logarithm1Fun2D(self, *args):
        return _IMath.IPFitting_Logarithm1Fun2D(self, *args)

    def LogarithmFit2D(self, *args):
        return _IMath.IPFitting_LogarithmFit2D(self, *args)

    def User1Fun2D(self, *args):
        return _IMath.IPFitting_User1Fun2D(self, *args)

    def User1Fit2D(self, *args):
        return _IMath.IPFitting_User1Fit2D(self, *args)

    def User2Fun2D(self, *args):
        return _IMath.IPFitting_User2Fun2D(self, *args)

    def User2Fit2D(self, *args):
        return _IMath.IPFitting_User2Fit2D(self, *args)

    def User3Fun2D(self, *args):
        return _IMath.IPFitting_User3Fun2D(self, *args)

    def User3Fit2D(self, *args):
        return _IMath.IPFitting_User3Fit2D(self, *args)

    def User4Fun2D(self, *args):
        return _IMath.IPFitting_User4Fun2D(self, *args)

    def User4Fit2D(self, *args):
        return _IMath.IPFitting_User4Fit2D(self, *args)

    def User5Fun2D(self, *args):
        return _IMath.IPFitting_User5Fun2D(self, *args)

    def User5Fit2D(self, *args):
        return _IMath.IPFitting_User5Fit2D(self, *args)

    def UserFit2D(self, *args):
        return _IMath.IPFitting_UserFit2D(self, *args)
IPFitting_swigregister = _IMath.IPFitting_swigregister
IPFitting_swigregister(IPFitting)

# This file is compatible with both classic and new-style classes.


