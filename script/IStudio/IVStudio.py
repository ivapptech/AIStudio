# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import numpy as np



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IVStudio')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IVStudio')
    _IVStudio = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IVStudio', [dirname(__file__)])
        except ImportError:
            import _IVStudio
            return _IVStudio
        try:
            _mod = imp.load_module('_IVStudio', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IVStudio = swig_import_helper()
    del swig_import_helper
else:
    import _IVStudio
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IVStudio.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _IVStudio.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IVStudio.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IVStudio.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IVStudio.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IVStudio.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IVStudio.SwigPyIterator_copy(self)

    def next(self):
        return _IVStudio.SwigPyIterator_next(self)

    def __next__(self):
        return _IVStudio.SwigPyIterator___next__(self)

    def previous(self):
        return _IVStudio.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IVStudio.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IVStudio.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IVStudio.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IVStudio.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IVStudio.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IVStudio.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IVStudio.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IVStudio.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _IVStudio.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IVStudio.IntVector___nonzero__(self)

    def __bool__(self):
        return _IVStudio.IntVector___bool__(self)

    def __len__(self):
        return _IVStudio.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _IVStudio.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IVStudio.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IVStudio.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IVStudio.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IVStudio.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IVStudio.IntVector___setitem__(self, *args)

    def pop(self):
        return _IVStudio.IntVector_pop(self)

    def append(self, x):
        return _IVStudio.IntVector_append(self, x)

    def empty(self):
        return _IVStudio.IntVector_empty(self)

    def size(self):
        return _IVStudio.IntVector_size(self)

    def swap(self, v):
        return _IVStudio.IntVector_swap(self, v)

    def begin(self):
        return _IVStudio.IntVector_begin(self)

    def end(self):
        return _IVStudio.IntVector_end(self)

    def rbegin(self):
        return _IVStudio.IntVector_rbegin(self)

    def rend(self):
        return _IVStudio.IntVector_rend(self)

    def clear(self):
        return _IVStudio.IntVector_clear(self)

    def get_allocator(self):
        return _IVStudio.IntVector_get_allocator(self)

    def pop_back(self):
        return _IVStudio.IntVector_pop_back(self)

    def erase(self, *args):
        return _IVStudio.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _IVStudio.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _IVStudio.IntVector_push_back(self, x)

    def front(self):
        return _IVStudio.IntVector_front(self)

    def back(self):
        return _IVStudio.IntVector_back(self)

    def assign(self, n, x):
        return _IVStudio.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _IVStudio.IntVector_resize(self, *args)

    def insert(self, *args):
        return _IVStudio.IntVector_insert(self, *args)

    def reserve(self, n):
        return _IVStudio.IntVector_reserve(self, n)

    def capacity(self):
        return _IVStudio.IntVector_capacity(self)
    __swig_destroy__ = _IVStudio.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _IVStudio.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _IVStudio.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _IVStudio.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _IVStudio.DoubleVector___bool__(self)

    def __len__(self):
        return _IVStudio.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _IVStudio.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _IVStudio.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _IVStudio.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _IVStudio.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _IVStudio.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _IVStudio.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _IVStudio.DoubleVector_pop(self)

    def append(self, x):
        return _IVStudio.DoubleVector_append(self, x)

    def empty(self):
        return _IVStudio.DoubleVector_empty(self)

    def size(self):
        return _IVStudio.DoubleVector_size(self)

    def swap(self, v):
        return _IVStudio.DoubleVector_swap(self, v)

    def begin(self):
        return _IVStudio.DoubleVector_begin(self)

    def end(self):
        return _IVStudio.DoubleVector_end(self)

    def rbegin(self):
        return _IVStudio.DoubleVector_rbegin(self)

    def rend(self):
        return _IVStudio.DoubleVector_rend(self)

    def clear(self):
        return _IVStudio.DoubleVector_clear(self)

    def get_allocator(self):
        return _IVStudio.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _IVStudio.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _IVStudio.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _IVStudio.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _IVStudio.DoubleVector_push_back(self, x)

    def front(self):
        return _IVStudio.DoubleVector_front(self)

    def back(self):
        return _IVStudio.DoubleVector_back(self)

    def assign(self, n, x):
        return _IVStudio.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _IVStudio.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _IVStudio.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _IVStudio.DoubleVector_reserve(self, n)

    def capacity(self):
        return _IVStudio.DoubleVector_capacity(self)
    __swig_destroy__ = _IVStudio.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _IVStudio.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class PLocationSide(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLocationSide, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLocationSide, name)
    __repr__ = _swig_repr
    Location_Left = _IVStudio.PLocationSide_Location_Left
    Location_Right = _IVStudio.PLocationSide_Location_Right
    Location_Top = _IVStudio.PLocationSide_Location_Top
    Location_Bottom = _IVStudio.PLocationSide_Location_Bottom
    Location_TopLeft = _IVStudio.PLocationSide_Location_TopLeft
    Location_TopRight = _IVStudio.PLocationSide_Location_TopRight
    Location_BottomLeft = _IVStudio.PLocationSide_Location_BottomLeft
    Location_BottomRight = _IVStudio.PLocationSide_Location_BottomRight
    Location_Center = _IVStudio.PLocationSide_Location_Center
    Location_TopCenter = _IVStudio.PLocationSide_Location_TopCenter
    Location_BottomCenter = _IVStudio.PLocationSide_Location_BottomCenter
    LocationSide_Left = _IVStudio.PLocationSide_LocationSide_Left
    LocationSide_Right = _IVStudio.PLocationSide_LocationSide_Right
    LocationSide_Top = _IVStudio.PLocationSide_LocationSide_Top
    LocationSide_Bottom = _IVStudio.PLocationSide_LocationSide_Bottom
    LocationSide_All = _IVStudio.PLocationSide_LocationSide_All

    def __init__(self):
        this = _IVStudio.new_PLocationSide()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PLocationSide
    __del__ = lambda self: None
PLocationSide_swigregister = _IVStudio.PLocationSide_swigregister
PLocationSide_swigregister(PLocationSide)

class PFillType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PFillType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PFillType, name)
    __repr__ = _swig_repr
    FillType_None = _IVStudio.PFillType_FillType_None
    FillType_Solid = _IVStudio.PFillType_FillType_Solid
    FillType_Texture = _IVStudio.PFillType_FillType_Texture
    FillType_Hatch = _IVStudio.PFillType_FillType_Hatch
    FillType_HoriGradient = _IVStudio.PFillType_FillType_HoriGradient
    FillType_VertGradient = _IVStudio.PFillType_FillType_VertGradient
    FillType_FDiagonalGradient = _IVStudio.PFillType_FillType_FDiagonalGradient
    FillType_BDiagonalGradient = _IVStudio.PFillType_FillType_BDiagonalGradient
    FillType_RadialGradient = _IVStudio.PFillType_FillType_RadialGradient
    FillType_PathGradient = _IVStudio.PFillType_FillType_PathGradient

    def __init__(self):
        this = _IVStudio.new_PFillType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PFillType
    __del__ = lambda self: None
PFillType_swigregister = _IVStudio.PFillType_swigregister
PFillType_swigregister(PFillType)

class PLineType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLineType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLineType, name)
    __repr__ = _swig_repr
    LineType_None = _IVStudio.PLineType_LineType_None
    LineType_Solid = _IVStudio.PLineType_LineType_Solid
    LineType_Dash = _IVStudio.PLineType_LineType_Dash
    LineType_Dot = _IVStudio.PLineType_LineType_Dot
    LineType_DashDot = _IVStudio.PLineType_LineType_DashDot
    LineType_DashDotDot = _IVStudio.PLineType_LineType_DashDotDot
    LineType_Custom = _IVStudio.PLineType_LineType_Custom
    LineType_3DBeam = _IVStudio.PLineType_LineType_3DBeam
    LineType_3DCylinder = _IVStudio.PLineType_LineType_3DCylinder

    def __init__(self):
        this = _IVStudio.new_PLineType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PLineType
    __del__ = lambda self: None
PLineType_swigregister = _IVStudio.PLineType_swigregister
PLineType_swigregister(PLineType)

class PLineCapType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLineCapType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLineCapType, name)
    __repr__ = _swig_repr
    LineCapType_Butt = _IVStudio.PLineCapType_LineCapType_Butt
    LineCapType_Square = _IVStudio.PLineCapType_LineCapType_Square
    LineCapType_Round = _IVStudio.PLineCapType_LineCapType_Round
    LineCapType_Triangle = _IVStudio.PLineCapType_LineCapType_Triangle
    LineCapType_Arrow = _IVStudio.PLineCapType_LineCapType_Arrow
    LineCapType_Diamond = _IVStudio.PLineCapType_LineCapType_Diamond
    LineCapType_Circle = _IVStudio.PLineCapType_LineCapType_Circle
    LineCapType_Custom = _IVStudio.PLineCapType_LineCapType_Custom
    LineCapType_3DBox = _IVStudio.PLineCapType_LineCapType_3DBox
    LineCapType_3DSphere = _IVStudio.PLineCapType_LineCapType_3DSphere
    LineCapType_3DCone = _IVStudio.PLineCapType_LineCapType_3DCone
    LineCapType_3DTetrahedron = _IVStudio.PLineCapType_LineCapType_3DTetrahedron

    def __init__(self):
        this = _IVStudio.new_PLineCapType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PLineCapType
    __del__ = lambda self: None
PLineCapType_swigregister = _IVStudio.PLineCapType_swigregister
PLineCapType_swigregister(PLineCapType)

class PIconType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PIconType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PIconType, name)
    __repr__ = _swig_repr
    Icon_None = _IVStudio.PIconType_Icon_None
    Icon_DropDown = _IVStudio.PIconType_Icon_DropDown
    Icon_DropUp = _IVStudio.PIconType_Icon_DropUp
    Icon_DropDown2 = _IVStudio.PIconType_Icon_DropDown2
    Icon_PopDown = _IVStudio.PIconType_Icon_PopDown
    Icon_ExpanDown = _IVStudio.PIconType_Icon_ExpanDown
    Icon_ArrowDown = _IVStudio.PIconType_Icon_ArrowDown
    Icon_ArrowUp = _IVStudio.PIconType_Icon_ArrowUp
    Icon_ArrowLeft = _IVStudio.PIconType_Icon_ArrowLeft
    Icon_ArrowRight = _IVStudio.PIconType_Icon_ArrowRight
    Icon_DropLeft = _IVStudio.PIconType_Icon_DropLeft
    Icon_DropRight = _IVStudio.PIconType_Icon_DropRight
    Icon_DropLeftStop = _IVStudio.PIconType_Icon_DropLeftStop
    Icon_DropRightStop = _IVStudio.PIconType_Icon_DropRightStop
    Icon_DropUpStop = _IVStudio.PIconType_Icon_DropUpStop
    Icon_DropDownStop = _IVStudio.PIconType_Icon_DropDownStop
    Icon_RectCross = _IVStudio.PIconType_Icon_RectCross
    Icon_CrossHair = _IVStudio.PIconType_Icon_CrossHair
    Icon_SolidCircle = _IVStudio.PIconType_Icon_SolidCircle
    Icon_MinBar = _IVStudio.PIconType_Icon_MinBar
    Icon_Hide = _IVStudio.PIconType_Icon_Hide
    Icon_Show = _IVStudio.PIconType_Icon_Show
    Icon_Cross = _IVStudio.PIconType_Icon_Cross
    Icon_Correct = _IVStudio.PIconType_Icon_Correct
    Icon_Close = _IVStudio.PIconType_Icon_Close
    Icon_Star4 = _IVStudio.PIconType_Icon_Star4
    Icon_Star5 = _IVStudio.PIconType_Icon_Star5
    Icon_Star6 = _IVStudio.PIconType_Icon_Star6
    Icon_CStar4 = _IVStudio.PIconType_Icon_CStar4
    Icon_CStar5 = _IVStudio.PIconType_Icon_CStar5
    Icon_CStar6 = _IVStudio.PIconType_Icon_CStar6
    Icon_Question = _IVStudio.PIconType_Icon_Question
    Icon_CQuestion = _IVStudio.PIconType_Icon_CQuestion
    Icon_RectEmpty = _IVStudio.PIconType_Icon_RectEmpty
    Icon_RectSolid = _IVStudio.PIconType_Icon_RectSolid
    Icon_RectDot = _IVStudio.PIconType_Icon_RectDot
    Icon_RectCross2 = _IVStudio.PIconType_Icon_RectCross2
    Icon_RectPlus = _IVStudio.PIconType_Icon_RectPlus
    Icon_RectHLine = _IVStudio.PIconType_Icon_RectHLine
    Icon_RectVLine = _IVStudio.PIconType_Icon_RectVLine
    Icon_RectHLFill = _IVStudio.PIconType_Icon_RectHLFill
    Icon_RectHRFill = _IVStudio.PIconType_Icon_RectHRFill
    Icon_RectVTFill = _IVStudio.PIconType_Icon_RectVTFill
    Icon_RectVBFill = _IVStudio.PIconType_Icon_RectVBFill
    Icon_CircleEmpty = _IVStudio.PIconType_Icon_CircleEmpty
    Icon_CircleSolid = _IVStudio.PIconType_Icon_CircleSolid
    Icon_CircleDot = _IVStudio.PIconType_Icon_CircleDot
    Icon_CircleCross = _IVStudio.PIconType_Icon_CircleCross
    Icon_CirclePlus = _IVStudio.PIconType_Icon_CirclePlus
    Icon_CircleHLine = _IVStudio.PIconType_Icon_CircleHLine
    Icon_CircleVLine = _IVStudio.PIconType_Icon_CircleVLine
    Icon_CircleHLFill = _IVStudio.PIconType_Icon_CircleHLFill
    Icon_CircleHRFill = _IVStudio.PIconType_Icon_CircleHRFill
    Icon_CircleVTFill = _IVStudio.PIconType_Icon_CircleVTFill
    Icon_CircleVBFill = _IVStudio.PIconType_Icon_CircleVBFill
    Icon_UTriangleEmpty = _IVStudio.PIconType_Icon_UTriangleEmpty
    Icon_UTriangleSolid = _IVStudio.PIconType_Icon_UTriangleSolid
    Icon_UTriangleDot = _IVStudio.PIconType_Icon_UTriangleDot
    Icon_UTriangleCross = _IVStudio.PIconType_Icon_UTriangleCross
    Icon_UTrianglePlus = _IVStudio.PIconType_Icon_UTrianglePlus
    Icon_UTriangleHLine = _IVStudio.PIconType_Icon_UTriangleHLine
    Icon_UTriangleVLine = _IVStudio.PIconType_Icon_UTriangleVLine
    Icon_UTriangleHLFill = _IVStudio.PIconType_Icon_UTriangleHLFill
    Icon_UTriangleHRFill = _IVStudio.PIconType_Icon_UTriangleHRFill
    Icon_UTriangleVTFill = _IVStudio.PIconType_Icon_UTriangleVTFill
    Icon_UTriangleVBFill = _IVStudio.PIconType_Icon_UTriangleVBFill
    Icon_DTriangleEmpty = _IVStudio.PIconType_Icon_DTriangleEmpty
    Icon_DTriangleSolid = _IVStudio.PIconType_Icon_DTriangleSolid
    Icon_DTriangleDot = _IVStudio.PIconType_Icon_DTriangleDot
    Icon_DTriangleCross = _IVStudio.PIconType_Icon_DTriangleCross
    Icon_DTrianglePlus = _IVStudio.PIconType_Icon_DTrianglePlus
    Icon_DTriangleHLine = _IVStudio.PIconType_Icon_DTriangleHLine
    Icon_DTriangleVLine = _IVStudio.PIconType_Icon_DTriangleVLine
    Icon_DTriangleHLFill = _IVStudio.PIconType_Icon_DTriangleHLFill
    Icon_DTriangleHRFill = _IVStudio.PIconType_Icon_DTriangleHRFill
    Icon_DTriangleVTFill = _IVStudio.PIconType_Icon_DTriangleVTFill
    Icon_DTriangleVBFill = _IVStudio.PIconType_Icon_DTriangleVBFill
    Icon_LTriangleEmpty = _IVStudio.PIconType_Icon_LTriangleEmpty
    Icon_LTriangleSolid = _IVStudio.PIconType_Icon_LTriangleSolid
    Icon_LTriangleDot = _IVStudio.PIconType_Icon_LTriangleDot
    Icon_LTriangleCross = _IVStudio.PIconType_Icon_LTriangleCross
    Icon_LTrianglePlus = _IVStudio.PIconType_Icon_LTrianglePlus
    Icon_LTriangleHLine = _IVStudio.PIconType_Icon_LTriangleHLine
    Icon_LTriangleVLine = _IVStudio.PIconType_Icon_LTriangleVLine
    Icon_LTriangleHLFill = _IVStudio.PIconType_Icon_LTriangleHLFill
    Icon_LTriangleHRFill = _IVStudio.PIconType_Icon_LTriangleHRFill
    Icon_LTriangleVTFill = _IVStudio.PIconType_Icon_LTriangleVTFill
    Icon_LTriangleVBFill = _IVStudio.PIconType_Icon_LTriangleVBFill
    Icon_RTriangleEmpty = _IVStudio.PIconType_Icon_RTriangleEmpty
    Icon_RTriangleSolid = _IVStudio.PIconType_Icon_RTriangleSolid
    Icon_RTriangleDot = _IVStudio.PIconType_Icon_RTriangleDot
    Icon_RTriangleCross = _IVStudio.PIconType_Icon_RTriangleCross
    Icon_RTrianglePlus = _IVStudio.PIconType_Icon_RTrianglePlus
    Icon_RTriangleHLine = _IVStudio.PIconType_Icon_RTriangleHLine
    Icon_RTriangleVLine = _IVStudio.PIconType_Icon_RTriangleVLine
    Icon_RTriangleHLFill = _IVStudio.PIconType_Icon_RTriangleHLFill
    Icon_RTriangleHRFill = _IVStudio.PIconType_Icon_RTriangleHRFill
    Icon_RTriangleVTFill = _IVStudio.PIconType_Icon_RTriangleVTFill
    Icon_RTriangleVBFill = _IVStudio.PIconType_Icon_RTriangleVBFill
    Icon_DiamondEmpty = _IVStudio.PIconType_Icon_DiamondEmpty
    Icon_DiamondSolid = _IVStudio.PIconType_Icon_DiamondSolid
    Icon_DiamondDot = _IVStudio.PIconType_Icon_DiamondDot
    Icon_DiamondCross = _IVStudio.PIconType_Icon_DiamondCross
    Icon_DiamondPlus = _IVStudio.PIconType_Icon_DiamondPlus
    Icon_DiamondHLine = _IVStudio.PIconType_Icon_DiamondHLine
    Icon_DiamondVLine = _IVStudio.PIconType_Icon_DiamondVLine
    Icon_DiamondHLFill = _IVStudio.PIconType_Icon_DiamondHLFill
    Icon_DiamondHRFill = _IVStudio.PIconType_Icon_DiamondHRFill
    Icon_DiamondVTFill = _IVStudio.PIconType_Icon_DiamondVTFill
    Icon_DiamondVBFill = _IVStudio.PIconType_Icon_DiamondVBFill
    Icon_StarEmpty = _IVStudio.PIconType_Icon_StarEmpty
    Icon_StarSolid = _IVStudio.PIconType_Icon_StarSolid
    Icon_StarDot = _IVStudio.PIconType_Icon_StarDot
    Icon_StarCross = _IVStudio.PIconType_Icon_StarCross
    Icon_StarPlus = _IVStudio.PIconType_Icon_StarPlus
    Icon_StarHLine = _IVStudio.PIconType_Icon_StarHLine
    Icon_StarVLine = _IVStudio.PIconType_Icon_StarVLine
    Icon_StarHLFill = _IVStudio.PIconType_Icon_StarHLFill
    Icon_StarHRFill = _IVStudio.PIconType_Icon_StarHRFill
    Icon_StarVTFill = _IVStudio.PIconType_Icon_StarVTFill
    Icon_StarVBFill = _IVStudio.PIconType_Icon_StarVBFill
    Icon_Poly5Empty = _IVStudio.PIconType_Icon_Poly5Empty
    Icon_Poly5Solid = _IVStudio.PIconType_Icon_Poly5Solid
    Icon_Poly5Dot = _IVStudio.PIconType_Icon_Poly5Dot
    Icon_Poly5Cross = _IVStudio.PIconType_Icon_Poly5Cross
    Icon_Poly5Plus = _IVStudio.PIconType_Icon_Poly5Plus
    Icon_Poly5HLine = _IVStudio.PIconType_Icon_Poly5HLine
    Icon_Poly5VLine = _IVStudio.PIconType_Icon_Poly5VLine
    Icon_Poly5HLFill = _IVStudio.PIconType_Icon_Poly5HLFill
    Icon_Poly5HRFill = _IVStudio.PIconType_Icon_Poly5HRFill
    Icon_Poly5VTFill = _IVStudio.PIconType_Icon_Poly5VTFill
    Icon_Poly5VBFill = _IVStudio.PIconType_Icon_Poly5VBFill
    Icon_Poly6Empty = _IVStudio.PIconType_Icon_Poly6Empty
    Icon_Poly6Solid = _IVStudio.PIconType_Icon_Poly6Solid
    Icon_Poly6Dot = _IVStudio.PIconType_Icon_Poly6Dot
    Icon_Poly6Cross = _IVStudio.PIconType_Icon_Poly6Cross
    Icon_Poly6Plus = _IVStudio.PIconType_Icon_Poly6Plus
    Icon_Poly6HLine = _IVStudio.PIconType_Icon_Poly6HLine
    Icon_Poly6VLine = _IVStudio.PIconType_Icon_Poly6VLine
    Icon_Poly6HLFill = _IVStudio.PIconType_Icon_Poly6HLFill
    Icon_Poly6HRFill = _IVStudio.PIconType_Icon_Poly6HRFill
    Icon_Poly6VTFill = _IVStudio.PIconType_Icon_Poly6VTFill
    Icon_Poly6VBFill = _IVStudio.PIconType_Icon_Poly6VBFill
    Icon_3DBox = _IVStudio.PIconType_Icon_3DBox
    Icon_3DSphere = _IVStudio.PIconType_Icon_3DSphere
    Icon_3DCone = _IVStudio.PIconType_Icon_3DCone
    Icon_3DCylinder = _IVStudio.PIconType_Icon_3DCylinder
    Icon_3DTorus = _IVStudio.PIconType_Icon_3DTorus
    Icon_3DDodecahedron = _IVStudio.PIconType_Icon_3DDodecahedron
    Icon_3DOctahedron = _IVStudio.PIconType_Icon_3DOctahedron
    Icon_3DIcosahedron = _IVStudio.PIconType_Icon_3DIcosahedron
    Icon_3DTetrahedron = _IVStudio.PIconType_Icon_3DTetrahedron
    Icon_3DPie = _IVStudio.PIconType_Icon_3DPie

    def __init__(self):
        this = _IVStudio.new_PIconType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PIconType
    __del__ = lambda self: None
PIconType_swigregister = _IVStudio.PIconType_swigregister
PIconType_swigregister(PIconType)

class PDrawItemType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PDrawItemType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDrawItemType, name)
    __repr__ = _swig_repr
    DrawItem_None = _IVStudio.PDrawItemType_DrawItem_None
    DrawItem_Line = _IVStudio.PDrawItemType_DrawItem_Line
    DrawItem_Circle = _IVStudio.PDrawItemType_DrawItem_Circle
    DrawItem_Arc = _IVStudio.PDrawItemType_DrawItem_Arc
    DrawItem_Curve = _IVStudio.PDrawItemType_DrawItem_Curve
    DrawItem_Rect = _IVStudio.PDrawItemType_DrawItem_Rect
    DrawItem_RoundRect = _IVStudio.PDrawItemType_DrawItem_RoundRect
    DrawItem_Polygon = _IVStudio.PDrawItemType_DrawItem_Polygon
    DrawItem_SPolygon = _IVStudio.PDrawItemType_DrawItem_SPolygon
    DrawItem_Text = _IVStudio.PDrawItemType_DrawItem_Text
    DrawItem_RichText = _IVStudio.PDrawItemType_DrawItem_RichText
    DrawItem_VLine = _IVStudio.PDrawItemType_DrawItem_VLine
    DrawItem_HLine = _IVStudio.PDrawItemType_DrawItem_HLine
    DrawItem_Image = _IVStudio.PDrawItemType_DrawItem_Image
    DrawItem_Cube = _IVStudio.PDrawItemType_DrawItem_Cube
    DrawItem_Cylinder = _IVStudio.PDrawItemType_DrawItem_Cylinder
    DrawItem_Cone = _IVStudio.PDrawItemType_DrawItem_Cone
    DrawItem_Torus = _IVStudio.PDrawItemType_DrawItem_Torus
    DrawItem_Sphere = _IVStudio.PDrawItemType_DrawItem_Sphere
    DrawItem_Path = _IVStudio.PDrawItemType_DrawItem_Path
    DrawItem_Mesh = _IVStudio.PDrawItemType_DrawItem_Mesh
    DrawItem_Field = _IVStudio.PDrawItemType_DrawItem_Field
    DrawItem_Table = _IVStudio.PDrawItemType_DrawItem_Table
    DrawItem_Group = _IVStudio.PDrawItemType_DrawItem_Group

    def __init__(self):
        this = _IVStudio.new_PDrawItemType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_PDrawItemType
    __del__ = lambda self: None
PDrawItemType_swigregister = _IVStudio.PDrawItemType_swigregister
PDrawItemType_swigregister(PDrawItemType)

class IPPlot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPlot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPPlot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetVisible(self, bVisible):
        return _IVStudio.IPPlot_SetVisible(self, bVisible)

    def SetPlotStyle(self, plotStyle):
        return _IVStudio.IPPlot_SetPlotStyle(self, plotStyle)

    def SetLineStyle(self, type):
        return _IVStudio.IPPlot_SetLineStyle(self, type)

    def SetLineColor(self, arg2):
        return _IVStudio.IPPlot_SetLineColor(self, arg2)

    def SetLineWidth(self, arg2):
        return _IVStudio.IPPlot_SetLineWidth(self, arg2)

    def SetPointStyle(self, arg2):
        return _IVStudio.IPPlot_SetPointStyle(self, arg2)

    def SetPointColor(self, arg2):
        return _IVStudio.IPPlot_SetPointColor(self, arg2)

    def SetPointBorderWidth(self, arg2):
        return _IVStudio.IPPlot_SetPointBorderWidth(self, arg2)

    def SetPointFillColor(self, arg2):
        return _IVStudio.IPPlot_SetPointFillColor(self, arg2)

    def SetPointSize(self, arg2):
        return _IVStudio.IPPlot_SetPointSize(self, arg2)

    def SetXAxis(self, axis_name):
        return _IVStudio.IPPlot_SetXAxis(self, axis_name)

    def SetYAxis(self, axis_name):
        return _IVStudio.IPPlot_SetYAxis(self, axis_name)

    def PlotY(self, array):
        return _IVStudio.IPPlot_PlotY(self, array)

    def PlotXRange(self, dataStart, dataInc):
        return _IVStudio.IPPlot_PlotXRange(self, dataStart, dataInc)

    def PlotX(self, array):
        return _IVStudio.IPPlot_PlotX(self, array)

    def PlotYRange(self, dataStart, dataInc):
        return _IVStudio.IPPlot_PlotYRange(self, dataStart, dataInc)

    def PlotXY(self, xData, yData):
        return _IVStudio.IPPlot_PlotXY(self, xData, yData)

    def ChartY(self, array):
        return _IVStudio.IPPlot_ChartY(self, array)

    def ChartXRange(self, dataStart, dataInc, chartLength, bScroll=True, scrollPercent=1):
        return _IVStudio.IPPlot_ChartXRange(self, dataStart, dataInc, chartLength, bScroll, scrollPercent)

    def ChartRollbackY(self, n):
        return _IVStudio.IPPlot_ChartRollbackY(self, n)

    def ChartX(self, array):
        return _IVStudio.IPPlot_ChartX(self, array)

    def ChartYRange(self, dataStart, dataInc, chartLength, bScroll=True, scrollPercent=1):
        return _IVStudio.IPPlot_ChartYRange(self, dataStart, dataInc, chartLength, bScroll, scrollPercent)

    def ChartRollbackX(self, n):
        return _IVStudio.IPPlot_ChartRollbackX(self, n)

    def ChartXY(self, xData, yData):
        return _IVStudio.IPPlot_ChartXY(self, xData, yData)

    def ChartXYRange(self, chartLength, bXScroll=True, bYScroll=False, scrollPercent=1):
        return _IVStudio.IPPlot_ChartXYRange(self, chartLength, bXScroll, bYScroll, scrollPercent)

    def ImageRange(self, x0, xinc, y0, yinc):
        return _IVStudio.IPPlot_ImageRange(self, x0, xinc, y0, yinc)

    def ImageColor1(self, IN_ARRAY1, image_width, image_height):
        return _IVStudio.IPPlot_ImageColor1(self, IN_ARRAY1, image_width, image_height)

    def ImageColor1_F(self, IN_ARRAY1, image_width, image_height):
        return _IVStudio.IPPlot_ImageColor1_F(self, IN_ARRAY1, image_width, image_height)

    def ImageColor1_I(self, IN_ARRAY1, image_width, image_height):
        return _IVStudio.IPPlot_ImageColor1_I(self, IN_ARRAY1, image_width, image_height)

    def ImageColor1_S(self, IN_ARRAY1, image_width, image_height):
        return _IVStudio.IPPlot_ImageColor1_S(self, IN_ARRAY1, image_width, image_height)

    def ImageColor1_C(self, IN_ARRAY1, DIM1, image_width, image_height):
        return _IVStudio.IPPlot_ImageColor1_C(self, IN_ARRAY1, DIM1, image_width, image_height)

    def Bar(self, labels, array):
        return _IVStudio.IPPlot_Bar(self, labels, array)

    def BarLabel(self, labels):
        return _IVStudio.IPPlot_BarLabel(self, labels)

    def BarData(self, array):
        return _IVStudio.IPPlot_BarData(self, array)

    def BarColor(self, fillType, fillColor, borderWidth, borderColor):
        return _IVStudio.IPPlot_BarColor(self, fillType, fillColor, borderWidth, borderColor)

    def SetBarPara(self, barSize, stackonplot=-1, barpadding=0):
        return _IVStudio.IPPlot_SetBarPara(self, barSize, stackonplot, barpadding)

    def Pie(self, labels, array, color):
        return _IVStudio.IPPlot_Pie(self, labels, array, color)

    def PieLabel(self, labels):
        return _IVStudio.IPPlot_PieLabel(self, labels)

    def PieData(self, array):
        return _IVStudio.IPPlot_PieData(self, array)

    def PieColor(self, color):
        return _IVStudio.IPPlot_PieColor(self, color)

    def SetPieColor(self, highlight, bkgrColor):
        return _IVStudio.IPPlot_SetPieColor(self, highlight, bkgrColor)

    def SetPieOffset(self, pie, offset):
        return _IVStudio.IPPlot_SetPieOffset(self, pie, offset)

    def SetPieLabelOffset(self, pie, offsetX, offsetY):
        return _IVStudio.IPPlot_SetPieLabelOffset(self, pie, offsetX, offsetY)

    def SetPiePara(self, angleStart, doughnutRatio):
        return _IVStudio.IPPlot_SetPiePara(self, angleStart, doughnutRatio)

    def SetPie3DPara(self, inclneAngle, pieDepth):
        return _IVStudio.IPPlot_SetPie3DPara(self, inclneAngle, pieDepth)

    def VectorXY(self, data1, data2, data3, data4):
        return _IVStudio.IPPlot_VectorXY(self, data1, data2, data3, data4)

    def VectorAL(self, data1, data2, data3, data4):
        return _IVStudio.IPPlot_VectorAL(self, data1, data2, data3, data4)

    def SetVectorPara(self, arrowSize, lenScale):
        return _IVStudio.IPPlot_SetVectorPara(self, arrowSize, lenScale)

    def BubbleXY(self, data1, data2, data3):
        return _IVStudio.IPPlot_BubbleXY(self, data1, data2, data3)

    def SetBubblePara(self, bubbleScale):
        return _IVStudio.IPPlot_SetBubblePara(self, bubbleScale)

    def SetErrorPercent(self, err):
        return _IVStudio.IPPlot_SetErrorPercent(self, err)

    def SetErrorUpData(self, array):
        return _IVStudio.IPPlot_SetErrorUpData(self, array)

    def SetErrorLowData(self, array):
        return _IVStudio.IPPlot_SetErrorLowData(self, array)

    def SetErrorStyle(self, errBarSource, direction, display, lineWidth, capWidth, barColor):
        return _IVStudio.IPPlot_SetErrorStyle(self, errBarSource, direction, display, lineWidth, capWidth, barColor)

    def PlotZ(self, array):
        return _IVStudio.IPPlot_PlotZ(self, array)

    def PlotZRange(self, dataStart, dataInc):
        return _IVStudio.IPPlot_PlotZRange(self, dataStart, dataInc)

    def ChartZ(self, array):
        return _IVStudio.IPPlot_ChartZ(self, array)

    def ChartZRange(self, dataStart, dataInc, chartLength, bScroll=True, scrollPercent=1):
        return _IVStudio.IPPlot_ChartZRange(self, dataStart, dataInc, chartLength, bScroll, scrollPercent)

    def ChartRollbackZ(self, n):
        return _IVStudio.IPPlot_ChartRollbackZ(self, n)

    def ChartXYZ(self, data1, data2, data3):
        return _IVStudio.IPPlot_ChartXYZ(self, data1, data2, data3)

    def ChartXYZRange(self, chartLength, bXScroll=True, bYScroll=False, bZScroll=False, scrollPercent=1):
        return _IVStudio.IPPlot_ChartXYZRange(self, chartLength, bXScroll, bYScroll, bZScroll, scrollPercent)

    def PlotXYZCurve(self, data1, data2, data3, data4):
        return _IVStudio.IPPlot_PlotXYZCurve(self, data1, data2, data3, data4)

    def SurfaceXYZ(self, data1, data2, data3, data4):
        return _IVStudio.IPPlot_SurfaceXYZ(self, data1, data2, data3, data4)

    def SurfaceXYZParametric(self, data1, data2, data3, data4, nu, nv):
        return _IVStudio.IPPlot_SurfaceXYZParametric(self, data1, data2, data3, data4, nu, nv)

    def SurfaceZ(self, array, nx, ny):
        return _IVStudio.IPPlot_SurfaceZ(self, array, nx, ny)

    def SurfaceRange(self, x0, xinc, y0, yinc):
        return _IVStudio.IPPlot_SurfaceRange(self, x0, xinc, y0, yinc)

    def VolumnRange(self, x0, xinc, y0, yinc, z0, zinc):
        return _IVStudio.IPPlot_VolumnRange(self, x0, xinc, y0, yinc, z0, zinc)

    def VolumnData(self, IN_ARRAY3):
        return _IVStudio.IPPlot_VolumnData(self, IN_ARRAY3)

    def SetVolumnDisplayType(self, plotVolumnDisplayType):
        return _IVStudio.IPPlot_SetVolumnDisplayType(self, plotVolumnDisplayType)

    def SetVolumeCutPosition(self, x, y, z):
        return _IVStudio.IPPlot_SetVolumeCutPosition(self, x, y, z)

    def Bar3D(self, label1, label2, array, color):
        return _IVStudio.IPPlot_Bar3D(self, label1, label2, array, color)

    def BarLabel3D(self, label1, label2):
        return _IVStudio.IPPlot_BarLabel3D(self, label1, label2)

    def VectorXYZ(self, data1, data2, data3, data4, data5, data6):
        return _IVStudio.IPPlot_VectorXYZ(self, data1, data2, data3, data4, data5, data6)

    def VectorABL(self, data1, data2, data3, data4, data5, data6):
        return _IVStudio.IPPlot_VectorABL(self, data1, data2, data3, data4, data5, data6)

    def BubbleXYZ(self, data1, data2, data3, data4):
        return _IVStudio.IPPlot_BubbleXYZ(self, data1, data2, data3, data4)

    def ImageColor(self, *args):
       if isinstance(args[0], np.ndarray):
          if args[0].ndim == 1:
              if args[0].dtype == np.float64:
                val = self.ImageColor1(*args)
              elif args[0].dtype == np.float32:
                val = self.ImageColor1_F(*args)
              elif args[0].dtype == np.int32:
                val = self.ImageColor1_I(*args)
              elif args[0].dtype == np.int16 or args[0].dtype == np.uint16:
                val = self.ImageColor1_S(*args)
              elif args[0].dtype == np.int8 or args[0].dtype == np.uint8:
                val = selfImageColor1_C(*args)
              else:
                val = self.ImageColor1(*args)
          else:
            val = 0
       else:
          val = 0
       return val

    __swig_destroy__ = _IVStudio.delete_IPPlot
    __del__ = lambda self: None
IPPlot_swigregister = _IVStudio.IPPlot_swigregister
IPPlot_swigregister(IPPlot)

class IPAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAxis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTitle(self, caption):
        return _IVStudio.IPAxis_SetTitle(self, caption)

    def SetTitleColor(self, color):
        return _IVStudio.IPAxis_SetTitleColor(self, color)

    def ModifyOption(self, axisOptions, bAdd):
        return _IVStudio.IPAxis_ModifyOption(self, axisOptions, bAdd)

    def SetAxisType(self, axisType, bInitialize):
        return _IVStudio.IPAxis_SetAxisType(self, axisType, bInitialize)

    def SetMinimum(self, min):
        return _IVStudio.IPAxis_SetMinimum(self, min)

    def SetMaximum(self, max):
        return _IVStudio.IPAxis_SetMaximum(self, max)

    def GetMinimum(self):
        return _IVStudio.IPAxis_GetMinimum(self)

    def GetMaximum(self):
        return _IVStudio.IPAxis_GetMaximum(self)

    def SetTickLabelFont(self, name, size, orientation=0, style=0, offsetX=0, offsetY=0):
        return _IVStudio.IPAxis_SetTickLabelFont(self, name, size, orientation, style, offsetX, offsetY)

    def SetTickColor(self, color):
        return _IVStudio.IPAxis_SetTickColor(self, color)

    def SetTickPadding(self, padding):
        return _IVStudio.IPAxis_SetTickPadding(self, padding)

    def SetTickMajorSize(self, size):
        return _IVStudio.IPAxis_SetTickMajorSize(self, size)

    def SetTickMinorSize(self, size):
        return _IVStudio.IPAxis_SetTickMinorSize(self, size)

    def SetTickScaling(self, scale):
        return _IVStudio.IPAxis_SetTickScaling(self, scale)

    def SetMajorTickRange(self, base, step):
        return _IVStudio.IPAxis_SetMajorTickRange(self, base, step)

    def SetMajorTickNumber(self, number):
        return _IVStudio.IPAxis_SetMajorTickNumber(self, number)

    def SetMinorTickNumber(self, number):
        return _IVStudio.IPAxis_SetMinorTickNumber(self, number)

    def SetMajorGridColor(self, color):
        return _IVStudio.IPAxis_SetMajorGridColor(self, color)

    def SetMajorGridStyle(self, lineType):
        return _IVStudio.IPAxis_SetMajorGridStyle(self, lineType)

    def SetMajorGridWidth(self, width):
        return _IVStudio.IPAxis_SetMajorGridWidth(self, width)

    def SetMinorGridColor(self, color):
        return _IVStudio.IPAxis_SetMinorGridColor(self, color)

    def SetMinorGridStyle(self, lineType):
        return _IVStudio.IPAxis_SetMinorGridStyle(self, lineType)

    def SetMinorGridWidth(self, width):
        return _IVStudio.IPAxis_SetMinorGridWidth(self, width)

    def ModifyVaulePairOption(self, valuePairOption, bAdd):
        return _IVStudio.IPAxis_ModifyVaulePairOption(self, valuePairOption, bAdd)

    def AddValuePair(self, *args):
        return _IVStudio.IPAxis_AddValuePair(self, *args)

    def SetValuePair(self, index, name, value, color):
        return _IVStudio.IPAxis_SetValuePair(self, index, name, value, color)

    def RemoveVaulePair(self, index):
        return _IVStudio.IPAxis_RemoveVaulePair(self, index)

    def SetTickLabelOrientation(self, textOrientationStyle):
        return _IVStudio.IPAxis_SetTickLabelOrientation(self, textOrientationStyle)
    __swig_destroy__ = _IVStudio.delete_IPAxis
    __del__ = lambda self: None
IPAxis_swigregister = _IVStudio.IPAxis_swigregister
IPAxis_swigregister(IPAxis)

class IPCursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPCursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPCursor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetCursorPos(self):
        return _IVStudio.IPCursor_GetCursorPos(self)

    def SetColor(self, color):
        return _IVStudio.IPCursor_SetColor(self, color)

    def SetLineStyle(self, lineType):
        return _IVStudio.IPCursor_SetLineStyle(self, lineType)

    def SetLineWidth(self, width):
        return _IVStudio.IPCursor_SetLineWidth(self, width)

    def SetCursorStyle(self, cursorLineShape):
        return _IVStudio.IPCursor_SetCursorStyle(self, cursorLineShape)

    def SetWidth(self, width):
        return _IVStudio.IPCursor_SetWidth(self, width)

    def SetHeight(self, height):
        return _IVStudio.IPCursor_SetHeight(self, height)

    def SetLabelColor(self, color):
        return _IVStudio.IPCursor_SetLabelColor(self, color)

    def SetLabelFont(self, name, size, orientation=0, style=0):
        return _IVStudio.IPCursor_SetLabelFont(self, name, size, orientation, style)

    def SetLabelDecimal(self, decimal):
        return _IVStudio.IPCursor_SetLabelDecimal(self, decimal)

    def SetSnapMode(self, snapModes):
        return _IVStudio.IPCursor_SetSnapMode(self, snapModes)

    def SetSnapPlot(self, plotIndex):
        return _IVStudio.IPCursor_SetSnapPlot(self, plotIndex)

    def GetCursorPos3D(self):
        return _IVStudio.IPCursor_GetCursorPos3D(self)

    def SetCursorPos3D(self, x, y, z):
        return _IVStudio.IPCursor_SetCursorPos3D(self, x, y, z)

    def SetLength(self, length):
        return _IVStudio.IPCursor_SetLength(self, length)

    def SetTextOrientation(self, textOrientationStyle):
        return _IVStudio.IPCursor_SetTextOrientation(self, textOrientationStyle)
    __swig_destroy__ = _IVStudio.delete_IPCursor
    __del__ = lambda self: None
IPCursor_swigregister = _IVStudio.IPCursor_swigregister
IPCursor_swigregister(IPCursor)

class IPDrawItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDrawItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDrawItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetType(self):
        return _IVStudio.IPDrawItem_GetType(self)

    def SetLineStyle(self, lineType):
        return _IVStudio.IPDrawItem_SetLineStyle(self, lineType)

    def SetLineWidth(self, lineWidth):
        return _IVStudio.IPDrawItem_SetLineWidth(self, lineWidth)

    def SetLineColor(self, lineColor):
        return _IVStudio.IPDrawItem_SetLineColor(self, lineColor)

    def SetLineBeginCap(self, lineCapType, size):
        return _IVStudio.IPDrawItem_SetLineBeginCap(self, lineCapType, size)

    def SetLineEndCap(self, lineCapType, size):
        return _IVStudio.IPDrawItem_SetLineEndCap(self, lineCapType, size)

    def SetFillStyle(self, fillType):
        return _IVStudio.IPDrawItem_SetFillStyle(self, fillType)

    def SetFillColor(self, fillColor):
        return _IVStudio.IPDrawItem_SetFillColor(self, fillColor)

    def SetFont(self, name, size, orientation=0, style=0):
        return _IVStudio.IPDrawItem_SetFont(self, name, size, orientation, style)

    def SetTextColor(self, textColor):
        return _IVStudio.IPDrawItem_SetTextColor(self, textColor)

    def SetOptions(self, bVisible, bRender3D):
        return _IVStudio.IPDrawItem_SetOptions(self, bVisible, bRender3D)

    def SetText(self, text):
        return _IVStudio.IPDrawItem_SetText(self, text)

    def SetAlignment(self, horizontalAlignment, verticalAlignment):
        return _IVStudio.IPDrawItem_SetAlignment(self, horizontalAlignment, verticalAlignment)

    def SetCoordinates(self, *args):
        return _IVStudio.IPDrawItem_SetCoordinates(self, *args)

    def SetRotation(self, rx, ry, rz):
        return _IVStudio.IPDrawItem_SetRotation(self, rx, ry, rz)
    __swig_destroy__ = _IVStudio.delete_IPDrawItem
    __del__ = lambda self: None
IPDrawItem_swigregister = _IVStudio.IPDrawItem_swigregister
IPDrawItem_swigregister(IPDrawItem)

class IPDrawGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDrawGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDrawGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddGroup(self, name):
        return _IVStudio.IPDrawGroup_AddGroup(self, name)

    def RemoveGroup(self, name):
        return _IVStudio.IPDrawGroup_RemoveGroup(self, name)

    def FindGroup(self, name):
        return _IVStudio.IPDrawGroup_FindGroup(self, name)

    def AddItem(self, drawItemType, name=None):
        return _IVStudio.IPDrawGroup_AddItem(self, drawItemType, name)

    def FindItem(self, name):
        return _IVStudio.IPDrawGroup_FindItem(self, name)

    def DeleteItem(self, name):
        return _IVStudio.IPDrawGroup_DeleteItem(self, name)

    def RemoveAllItems(self, bDelete):
        return _IVStudio.IPDrawGroup_RemoveAllItems(self, bDelete)
    __swig_destroy__ = _IVStudio.delete_IPDrawGroup
    __del__ = lambda self: None
IPDrawGroup_swigregister = _IVStudio.IPDrawGroup_swigregister
IPDrawGroup_swigregister(IPDrawGroup)

class IPAnnotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAnnotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAnnotation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetCaption(self, text, horizontalAlignment=0, verticalAlignment=0):
        return _IVStudio.IPAnnotation_SetCaption(self, text, horizontalAlignment, verticalAlignment)

    def SetCaptionColor(self, textcolor, backgroundColor=0):
        return _IVStudio.IPAnnotation_SetCaptionColor(self, textcolor, backgroundColor)

    def SetCaptionBorder(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionBorder(self, *args)

    def SetCaptionLocation(self, x, y, coorType=0):
        return _IVStudio.IPAnnotation_SetCaptionLocation(self, x, y, coorType)

    def SetArrowLineWidth(self, width):
        return _IVStudio.IPAnnotation_SetArrowLineWidth(self, width)

    def SetArrowLineColor(self, color):
        return _IVStudio.IPAnnotation_SetArrowLineColor(self, color)

    def SetArrowLineStyle(self, lineType):
        return _IVStudio.IPAnnotation_SetArrowLineStyle(self, lineType)

    def SetArrowTailStyle(self, lineCapType, width=5, height=10):
        return _IVStudio.IPAnnotation_SetArrowTailStyle(self, lineCapType, width, height)

    def SetArrowHeadStyle(self, lineCapType, width=5, height=10):
        return _IVStudio.IPAnnotation_SetArrowHeadStyle(self, lineCapType, width, height)

    def SetArrowHeadPos(self, x, y, coorType=0):
        return _IVStudio.IPAnnotation_SetArrowHeadPos(self, x, y, coorType)

    def SetDrawType(self, drawItemType):
        return _IVStudio.IPAnnotation_SetDrawType(self, drawItemType)

    def SetCaptionLocation3D(self, x, y, z, annotationCoordinate=0):
        return _IVStudio.IPAnnotation_SetCaptionLocation3D(self, x, y, z, annotationCoordinate)

    def SetCaptionOrientation(self, textOrientationStyle, rotationX=0, rotationY=0, rotationZ=0):
        return _IVStudio.IPAnnotation_SetCaptionOrientation(self, textOrientationStyle, rotationX, rotationY, rotationZ)

    def SetArrowHeadPos3D(self, x, y, z, annotationCoordinate=0):
        return _IVStudio.IPAnnotation_SetArrowHeadPos3D(self, x, y, z, annotationCoordinate)
    __swig_destroy__ = _IVStudio.delete_IPAnnotation
    __del__ = lambda self: None
IPAnnotation_swigregister = _IVStudio.IPAnnotation_swigregister
IPAnnotation_swigregister(IPAnnotation)

class IPLight3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPLight3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPLight3D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ModifyOption(self, lightOptions, bAdd):
        return _IVStudio.IPLight3D_ModifyOption(self, lightOptions, bAdd)

    def SetDirection(self, nx, ny, nz, cutoffAngle):
        return _IVStudio.IPLight3D_SetDirection(self, nx, ny, nz, cutoffAngle)

    def SetPosition(self, px, py, pz):
        return _IVStudio.IPLight3D_SetPosition(self, px, py, pz)

    def SetDirectionLight(self, nx, ny, nz):
        return _IVStudio.IPLight3D_SetDirectionLight(self, nx, ny, nz)

    def SetPointLight(self, px, py, pz):
        return _IVStudio.IPLight3D_SetPointLight(self, px, py, pz)

    def SetSpotLight(self, px, py, pz, nx, ny, nz, cutoffAngle):
        return _IVStudio.IPLight3D_SetSpotLight(self, px, py, pz, nx, ny, nz, cutoffAngle)

    def SetColor(self, diffuse, ambient, specular):
        return _IVStudio.IPLight3D_SetColor(self, diffuse, ambient, specular)

    def SetAttenuation(self, constant, linear, quadratic):
        return _IVStudio.IPLight3D_SetAttenuation(self, constant, linear, quadratic)
    __swig_destroy__ = _IVStudio.delete_IPLight3D
    __del__ = lambda self: None
IPLight3D_swigregister = _IVStudio.IPLight3D_swigregister
IPLight3D_swigregister(IPLight3D)

class IPPalette(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPalette, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPPalette, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetMaximumScale(self, maxScale):
        return _IVStudio.IPPalette_SetMaximumScale(self, maxScale)

    def SetMinimumScale(self, minScale):
        return _IVStudio.IPPalette_SetMinimumScale(self, minScale)

    def GetColor(self, index):
        return _IVStudio.IPPalette_GetColor(self, index)

    def SetColor(self, index, color):
        return _IVStudio.IPPalette_SetColor(self, index, color)

    def SetLevelNum(self, numThreshold):
        return _IVStudio.IPPalette_SetLevelNum(self, numThreshold)

    def SetLevelValue(self, level, value):
        return _IVStudio.IPPalette_SetLevelValue(self, level, value)

    def SetLevelType(self, level, type):
        return _IVStudio.IPPalette_SetLevelType(self, level, type)
    __swig_destroy__ = _IVStudio.delete_IPPalette
    __del__ = lambda self: None
IPPalette_swigregister = _IVStudio.IPPalette_swigregister
IPPalette_swigregister(IPPalette)

class IPLegend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPLegend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPLegend, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetVisible(self, bVisible):
        return _IVStudio.IPLegend_SetVisible(self, bVisible)

    def SetLength(self, length):
        return _IVStudio.IPLegend_SetLength(self, length)

    def SetSpace(self, space, padding):
        return _IVStudio.IPLegend_SetSpace(self, space, padding)

    def SetLocationSide(self, locationSide):
        return _IVStudio.IPLegend_SetLocationSide(self, locationSide)

    def SetFont(self, name, size, orientation=0, style=0):
        return _IVStudio.IPLegend_SetFont(self, name, size, orientation, style)
    __swig_destroy__ = _IVStudio.delete_IPLegend
    __del__ = lambda self: None
IPLegend_swigregister = _IVStudio.IPLegend_swigregister
IPLegend_swigregister(IPLegend)

class IPGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPGraph, name)
    __repr__ = _swig_repr

    def __init__(self, id):
        this = _IVStudio.new_IPGraph(id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPGraph
    __del__ = lambda self: None
    __swig_setmethods__["graph_id"] = _IVStudio.IPGraph_graph_id_set
    __swig_getmethods__["graph_id"] = _IVStudio.IPGraph_graph_id_get
    if _newclass:
        graph_id = _swig_property(_IVStudio.IPGraph_graph_id_get, _IVStudio.IPGraph_graph_id_set)

    def SetFrameColor(self, fillType, color):
        return _IVStudio.IPGraph_SetFrameColor(self, fillType, color)

    def SetPlotAreaColor(self, fillStyle, color):
        return _IVStudio.IPGraph_SetPlotAreaColor(self, fillStyle, color)

    def SetCaption(self, caption):
        return _IVStudio.IPGraph_SetCaption(self, caption)

    def SetCaptionAlign(self, align):
        return _IVStudio.IPGraph_SetCaptionAlign(self, align)

    def SetCaptionColor(self, color):
        return _IVStudio.IPGraph_SetCaptionColor(self, color)

    def SetDisplayOrder(self, order):
        return _IVStudio.IPGraph_SetDisplayOrder(self, order)

    def SetMouseTrackingMode(self, mode, bAdd):
        return _IVStudio.IPGraph_SetMouseTrackingMode(self, mode, bAdd)

    def GetAxisCount(self):
        return _IVStudio.IPGraph_GetAxisCount(self)

    def Axes(self, *args):
        return _IVStudio.IPGraph_Axes(self, *args)

    def NewAxis(self, name, type):
        return _IVStudio.IPGraph_NewAxis(self, name, type)

    def RemoveAxis(self, *args):
        return _IVStudio.IPGraph_RemoveAxis(self, *args)

    def GetPlotCount(self):
        return _IVStudio.IPGraph_GetPlotCount(self)

    def Plots(self, *args):
        return _IVStudio.IPGraph_Plots(self, *args)

    def NewPlot(self, name=None):
        return _IVStudio.IPGraph_NewPlot(self, name)

    def RemovePlot(self, *args):
        return _IVStudio.IPGraph_RemovePlot(self, *args)

    def Set3DBarOffset(self, offset):
        return _IVStudio.IPGraph_Set3DBarOffset(self, offset)

    def GetLegend(self):
        return _IVStudio.IPGraph_GetLegend(self)

    def GetCursorCount(self):
        return _IVStudio.IPGraph_GetCursorCount(self)

    def AddCursor(self, name=None):
        return _IVStudio.IPGraph_AddCursor(self, name)

    def RemoveCursor(self, *args):
        return _IVStudio.IPGraph_RemoveCursor(self, *args)

    def GetAnnotationCount(self):
        return _IVStudio.IPGraph_GetAnnotationCount(self)

    def AddAnnotation(self, name=None):
        return _IVStudio.IPGraph_AddAnnotation(self, name)

    def GetAnnotation(self, name):
        return _IVStudio.IPGraph_GetAnnotation(self, name)

    def RemoveAnnotation(self, name):
        return _IVStudio.IPGraph_RemoveAnnotation(self, name)

    def GetPalette(self):
        return _IVStudio.IPGraph_GetPalette(self)

    def SetPalette(self, minScale=0, maxScale=1, bVisible=True):
        return _IVStudio.IPGraph_SetPalette(self, minScale, maxScale, bVisible)

    def SetProjectionType(self, projection3DType):
        return _IVStudio.IPGraph_SetProjectionType(self, projection3DType)

    def SetOrientation(self, ax, ay, az):
        return _IVStudio.IPGraph_SetOrientation(self, ax, ay, az)

    def SetViewCenter(self, x, y, z):
        return _IVStudio.IPGraph_SetViewCenter(self, x, y, z)

    def SetScale(self, sx, sy, sz):
        return _IVStudio.IPGraph_SetScale(self, sx, sy, sz)

    def SetPlotAreaScale(self, scale):
        return _IVStudio.IPGraph_SetPlotAreaScale(self, scale)

    def SetClip(self, bClip):
        return _IVStudio.IPGraph_SetClip(self, bClip)

    def GetLightCount(self):
        return _IVStudio.IPGraph_GetLightCount(self)

    def AddLight(self, name):
        return _IVStudio.IPGraph_AddLight(self, name)

    def GetLight(self, *args):
        return _IVStudio.IPGraph_GetLight(self, *args)

    def RemoveLight(self, name):
        return _IVStudio.IPGraph_RemoveLight(self, name)
IPGraph_swigregister = _IVStudio.IPGraph_swigregister
IPGraph_swigregister(IPGraph)

class IPDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDraw, name)
    __repr__ = _swig_repr

    def __init__(self, id):
        this = _IVStudio.new_IPDraw(id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPDraw
    __del__ = lambda self: None
    __swig_setmethods__["draw_id"] = _IVStudio.IPDraw_draw_id_set
    __swig_getmethods__["draw_id"] = _IVStudio.IPDraw_draw_id_get
    if _newclass:
        draw_id = _swig_property(_IVStudio.IPDraw_draw_id_get, _IVStudio.IPDraw_draw_id_set)

    def SetBackgroundColor(self, color):
        return _IVStudio.IPDraw_SetBackgroundColor(self, color)

    def SetPageSize(self, pageX, pageY, pageWidth, pageHeight, systemLengthUnit):
        return _IVStudio.IPDraw_SetPageSize(self, pageX, pageY, pageWidth, pageHeight, systemLengthUnit)

    def SetZoomMode(self, drawZoom_Mode):
        return _IVStudio.IPDraw_SetZoomMode(self, drawZoom_Mode)

    def ShowDrawTools(self, locationSide, bFloating, bVisible):
        return _IVStudio.IPDraw_ShowDrawTools(self, locationSide, bFloating, bVisible)

    def GetDrawModel(self):
        return _IVStudio.IPDraw_GetDrawModel(self)

    def AddDrawGroup(self, bSetActive, name):
        return _IVStudio.IPDraw_AddDrawGroup(self, bSetActive, name)

    def FindDrawGroup(self, name):
        return _IVStudio.IPDraw_FindDrawGroup(self, name)

    def SetActiveDrawGroup(self, name):
        return _IVStudio.IPDraw_SetActiveDrawGroup(self, name)

    def AddDrawItem(self, drawItemType, name):
        return _IVStudio.IPDraw_AddDrawItem(self, drawItemType, name)

    def FindDrawItem(self, name):
        return _IVStudio.IPDraw_FindDrawItem(self, name)

    def DeleteDrawItem(self, name):
        return _IVStudio.IPDraw_DeleteDrawItem(self, name)

    def RemoveCursor(self, *args):
        return _IVStudio.IPDraw_RemoveCursor(self, *args)

    def AddCursor(self, name):
        return _IVStudio.IPDraw_AddCursor(self, name)

    def SetOrientation(self, ax, ay, az):
        return _IVStudio.IPDraw_SetOrientation(self, ax, ay, az)

    def SetViewCenter(self, x, y, z):
        return _IVStudio.IPDraw_SetViewCenter(self, x, y, z)

    def SetScale(self, sx, dy, sz):
        return _IVStudio.IPDraw_SetScale(self, sx, dy, sz)

    def GetLightCount(self):
        return _IVStudio.IPDraw_GetLightCount(self)

    def AddLight(self, name=None):
        return _IVStudio.IPDraw_AddLight(self, name)

    def GetLight(self, *args):
        return _IVStudio.IPDraw_GetLight(self, *args)

    def RemoveLight(self, *args):
        return _IVStudio.IPDraw_RemoveLight(self, *args)
IPDraw_swigregister = _IVStudio.IPDraw_swigregister
IPDraw_swigregister(IPDraw)

class IPDataGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDataGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDataGrid, name)
    __repr__ = _swig_repr

    def __init__(self, id):
        this = _IVStudio.new_IPDataGrid(id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPDataGrid
    __del__ = lambda self: None
    __swig_setmethods__["grid_id"] = _IVStudio.IPDataGrid_grid_id_set
    __swig_getmethods__["grid_id"] = _IVStudio.IPDataGrid_grid_id_get
    if _newclass:
        grid_id = _swig_property(_IVStudio.IPDataGrid_grid_id_get, _IVStudio.IPDataGrid_grid_id_set)

    def SetGridType(self, gridType, bInitial=True):
        return _IVStudio.IPDataGrid_SetGridType(self, gridType, bInitial)

    def GetColNumber(self):
        return _IVStudio.IPDataGrid_GetColNumber(self)

    def GetRowNumber(self):
        return _IVStudio.IPDataGrid_GetRowNumber(self)

    def SetColNumber(self, n):
        return _IVStudio.IPDataGrid_SetColNumber(self, n)

    def SetRowNumber(self, n):
        return _IVStudio.IPDataGrid_SetRowNumber(self, n)

    def AppendRow(self, numRow):
        return _IVStudio.IPDataGrid_AppendRow(self, numRow)

    def AppendCol(self, numCol):
        return _IVStudio.IPDataGrid_AppendCol(self, numCol)

    def InsertRow(self, insertAfter, numRow):
        return _IVStudio.IPDataGrid_InsertRow(self, insertAfter, numRow)

    def InsertCol(self, insertAfter, numCol):
        return _IVStudio.IPDataGrid_InsertCol(self, insertAfter, numCol)

    def InsertCells(self, cellInsertOption, numcell, numrow, numcol):
        return _IVStudio.IPDataGrid_InsertCells(self, cellInsertOption, numcell, numrow, numcol)

    def RemoveCells(self, cellDeleteOption, numcell, numrow, numcol):
        return _IVStudio.IPDataGrid_RemoveCells(self, cellDeleteOption, numcell, numrow, numcol)

    def RemoveRow(self, firstRow, lastRow):
        return _IVStudio.IPDataGrid_RemoveRow(self, firstRow, lastRow)

    def RemoveCol(self, firstCol, lastCol):
        return _IVStudio.IPDataGrid_RemoveCol(self, firstCol, lastCol)

    def RemoveAll(self):
        return _IVStudio.IPDataGrid_RemoveAll(self)

    def GetSelCells(self):
        return _IVStudio.IPDataGrid_GetSelCells(self)

    def SetSelCells(self, col0, row0, col1, row1):
        return _IVStudio.IPDataGrid_SetSelCells(self, col0, row0, col1, row1)

    def JointCells(self, firstCol, firstRow, lastCol, lastRow):
        return _IVStudio.IPDataGrid_JointCells(self, firstCol, firstRow, lastCol, lastRow)

    def UnJointCells(self, firstCol, firstRow, lastCol, lastRow):
        return _IVStudio.IPDataGrid_UnJointCells(self, firstCol, firstRow, lastCol, lastRow)

    def SetCellData(self, col, row, data):
        return _IVStudio.IPDataGrid_SetCellData(self, col, row, data)

    def SetCellText(self, col, row, pText, bText=True):
        return _IVStudio.IPDataGrid_SetCellText(self, col, row, pText, bText)

    def SetCellChar(self, col, row, pText, len, bText=True):
        return _IVStudio.IPDataGrid_SetCellChar(self, col, row, pText, len, bText)

    def SetRowData(self, row, firstCol, numData, data0, dataInc, bAdd=True):
        return _IVStudio.IPDataGrid_SetRowData(self, row, firstCol, numData, data0, dataInc, bAdd)

    def SetColData(self, *args):
        return _IVStudio.IPDataGrid_SetColData(self, *args)

    def SetData(self, firstCol, firstRow, lastCol, lastRow, array, bTranspose, bAdd=True):
        return _IVStudio.IPDataGrid_SetData(self, firstCol, firstRow, lastCol, lastRow, array, bTranspose, bAdd)

    def SetReadOnly(self, firstCol, firstRow, lastCol, lastRow, bReadOnly=True):
        return _IVStudio.IPDataGrid_SetReadOnly(self, firstCol, firstRow, lastCol, lastRow, bReadOnly)

    def SetColReadOnly(self, col, bReadOnly=True):
        return _IVStudio.IPDataGrid_SetColReadOnly(self, col, bReadOnly)

    def SetRowReadOnly(self, row, bReadOnly=True):
        return _IVStudio.IPDataGrid_SetRowReadOnly(self, row, bReadOnly)

    def GetCellData(self, col, row):
        return _IVStudio.IPDataGrid_GetCellData(self, col, row)

    def GetCellText(self, col, row):
        return _IVStudio.IPDataGrid_GetCellText(self, col, row)

    def GetData(self, col0, col1, colInc, row0, row1, rowInc, pData):
        return _IVStudio.IPDataGrid_GetData(self, col0, col1, colInc, row0, row1, rowInc, pData)

    def GetColData(self, col, firstRow, lastRow, rowInc, pData, bValidOnly=False):
        return _IVStudio.IPDataGrid_GetColData(self, col, firstRow, lastRow, rowInc, pData, bValidOnly)

    def GetColText(self, col, firstRow, lastRow, rowInc):
        return _IVStudio.IPDataGrid_GetColText(self, col, firstRow, lastRow, rowInc)

    def GetRowData(self, row, firstCol, lastCol, colInc, pData, bValidOnly=False):
        return _IVStudio.IPDataGrid_GetRowData(self, row, firstCol, lastCol, colInc, pData, bValidOnly)

    def ClearData(self, firstCol, firstRow, lastCol, lastRow):
        return _IVStudio.IPDataGrid_ClearData(self, firstCol, firstRow, lastCol, lastRow)

    def DeleteData(self, firstCol, firstRow, lastCol, lastRow):
        return _IVStudio.IPDataGrid_DeleteData(self, firstCol, firstRow, lastCol, lastRow)

    def SetDefaultColWidth(self, colWidth):
        return _IVStudio.IPDataGrid_SetDefaultColWidth(self, colWidth)

    def SetDefaultRowHeight(self, rowHeight):
        return _IVStudio.IPDataGrid_SetDefaultRowHeight(self, rowHeight)

    def SetColWidth(self, col, width, bFix=False):
        return _IVStudio.IPDataGrid_SetColWidth(self, col, width, bFix)

    def SetRowHeight(self, row, height, bFix=False):
        return _IVStudio.IPDataGrid_SetRowHeight(self, row, height, bFix)

    def FitColToWindow(self, col0, col1):
        return _IVStudio.IPDataGrid_FitColToWindow(self, col0, col1)

    def FitRowToWindow(self, row0, row1):
        return _IVStudio.IPDataGrid_FitRowToWindow(self, row0, row1)

    def EnableScroll(self, bHScroll, bVScroll, bAutoScroll=True):
        return _IVStudio.IPDataGrid_EnableScroll(self, bHScroll, bVScroll, bAutoScroll)

    def SetTopHeaderNum(self, n):
        return _IVStudio.IPDataGrid_SetTopHeaderNum(self, n)

    def SetLeftHeaderNum(self, n):
        return _IVStudio.IPDataGrid_SetLeftHeaderNum(self, n)

    def GetColName(self, col):
        return _IVStudio.IPDataGrid_GetColName(self, col)

    def SetCellFormat(self, firstCol, firstRow, lastCol, lastRow, gridCellType, gridCellStyle):
        return _IVStudio.IPDataGrid_SetCellFormat(self, firstCol, firstRow, lastCol, lastRow, gridCellType, gridCellStyle)

    def SetCellAlignment(self, firstCol, firstRow, lastCol, lastRow, horizontalAlignment, verticalAlignment, gridTextWrap):
        return _IVStudio.IPDataGrid_SetCellAlignment(self, firstCol, firstRow, lastCol, lastRow, horizontalAlignment, verticalAlignment, gridTextWrap)

    def SetCellStyle(self, col, row, gridCellStyle):
        return _IVStudio.IPDataGrid_SetCellStyle(self, col, row, gridCellStyle)

    def SetCellType(self, col, row, gridCellType):
        return _IVStudio.IPDataGrid_SetCellType(self, col, row, gridCellType)

    def SetCellTypeStyle(self, gridCellType, fill, text):
        return _IVStudio.IPDataGrid_SetCellTypeStyle(self, gridCellType, fill, text)

    def SetCellhAlignment(self, col, row, horizontalAlignment):
        return _IVStudio.IPDataGrid_SetCellhAlignment(self, col, row, horizontalAlignment)

    def SetCellvAlignment(self, col, row, verticalAlignment):
        return _IVStudio.IPDataGrid_SetCellvAlignment(self, col, row, verticalAlignment)

    def SetCellTextWrap(self, col, row, gridTextWrap):
        return _IVStudio.IPDataGrid_SetCellTextWrap(self, col, row, gridTextWrap)

    def SetTextRotation(self, col, row, textAngle):
        return _IVStudio.IPDataGrid_SetTextRotation(self, col, row, textAngle)

    def SetDataDecimalNum(self, col, row, decNum):
        return _IVStudio.IPDataGrid_SetDataDecimalNum(self, col, row, decNum)

    def SetDataCategory(self, col, row, gridCellDataCategory):
        return _IVStudio.IPDataGrid_SetDataCategory(self, col, row, gridCellDataCategory)

    def SetDataFormat(self, *args):
        return _IVStudio.IPDataGrid_SetDataFormat(self, *args)

    def AddFont(self, name, size, orientation=0, style=0):
        return _IVStudio.IPDataGrid_AddFont(self, name, size, orientation, style)

    def SetCellFont(self, firstCol, firstRow, lastCol, lastRow, fontIndex):
        return _IVStudio.IPDataGrid_SetCellFont(self, firstCol, firstRow, lastCol, lastRow, fontIndex)

    def AddColor(self, color):
        return _IVStudio.IPDataGrid_AddColor(self, color)

    def SetCellTextColor(self, firstCol, firstRow, lastCol, lastRow, crIndex):
        return _IVStudio.IPDataGrid_SetCellTextColor(self, firstCol, firstRow, lastCol, lastRow, crIndex)

    def SetCellFillColor(self, firstCol, firstRow, lastCol, lastRow, crIndex):
        return _IVStudio.IPDataGrid_SetCellFillColor(self, firstCol, firstRow, lastCol, lastRow, crIndex)

    def TabAppearance(self, bTabNavigate, bTabDropDown):
        return _IVStudio.IPDataGrid_TabAppearance(self, bTabNavigate, bTabDropDown)

    def SetSheetName(self, iSheet, name):
        return _IVStudio.IPDataGrid_SetSheetName(self, iSheet, name)

    def AddSheet(self, name):
        return _IVStudio.IPDataGrid_AddSheet(self, name)

    def InsertSheet(self, iSheet, name):
        return _IVStudio.IPDataGrid_InsertSheet(self, iSheet, name)

    def RemoveSheet(self, iSheet):
        return _IVStudio.IPDataGrid_RemoveSheet(self, iSheet)

    def SelectSheet(self, iSheet):
        return _IVStudio.IPDataGrid_SelectSheet(self, iSheet)

    def GetSheetNumber(self):
        return _IVStudio.IPDataGrid_GetSheetNumber(self)
IPDataGrid_swigregister = _IVStudio.IPDataGrid_swigregister
IPDataGrid_swigregister(IPDataGrid)

class IPStudio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPStudio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPStudio, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _IVStudio.new_IPStudio()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPStudio
    __del__ = lambda self: None
    __swig_setmethods__["DataFolder"] = _IVStudio.IPStudio_DataFolder_set
    __swig_getmethods__["DataFolder"] = _IVStudio.IPStudio_DataFolder_get
    if _newclass:
        DataFolder = _swig_property(_IVStudio.IPStudio_DataFolder_get, _IVStudio.IPStudio_DataFolder_set)
    __swig_setmethods__["ProjectFolder"] = _IVStudio.IPStudio_ProjectFolder_set
    __swig_getmethods__["ProjectFolder"] = _IVStudio.IPStudio_ProjectFolder_get
    if _newclass:
        ProjectFolder = _swig_property(_IVStudio.IPStudio_ProjectFolder_get, _IVStudio.IPStudio_ProjectFolder_set)
    __swig_setmethods__["SystemFolder"] = _IVStudio.IPStudio_SystemFolder_set
    __swig_getmethods__["SystemFolder"] = _IVStudio.IPStudio_SystemFolder_get
    if _newclass:
        SystemFolder = _swig_property(_IVStudio.IPStudio_SystemFolder_get, _IVStudio.IPStudio_SystemFolder_set)

    def SaveTensor4(self, name, type, IN_ARRAY4):
        return _IVStudio.IPStudio_SaveTensor4(self, name, type, IN_ARRAY4)

    def SaveTensor4_F(self, name, type, IN_ARRAY4):
        return _IVStudio.IPStudio_SaveTensor4_F(self, name, type, IN_ARRAY4)

    def SaveTensor4_I(self, name, type, IN_ARRAY4):
        return _IVStudio.IPStudio_SaveTensor4_I(self, name, type, IN_ARRAY4)

    def SaveTensor4_S(self, name, type, IN_ARRAY4):
        return _IVStudio.IPStudio_SaveTensor4_S(self, name, type, IN_ARRAY4)

    def SaveTensor4_C(self, name, type, IN_ARRAY4, DIM1, DIM2, DIM3, DIM4):
        return _IVStudio.IPStudio_SaveTensor4_C(self, name, type, IN_ARRAY4, DIM1, DIM2, DIM3, DIM4)

    def SaveTensor3(self, name, type, IN_ARRAY3):
        return _IVStudio.IPStudio_SaveTensor3(self, name, type, IN_ARRAY3)

    def SaveTensor3_F(self, name, type, IN_ARRAY3):
        return _IVStudio.IPStudio_SaveTensor3_F(self, name, type, IN_ARRAY3)

    def SaveTensor3_I(self, name, type, IN_ARRAY3):
        return _IVStudio.IPStudio_SaveTensor3_I(self, name, type, IN_ARRAY3)

    def SaveTensor3_S(self, name, type, IN_ARRAY3):
        return _IVStudio.IPStudio_SaveTensor3_S(self, name, type, IN_ARRAY3)

    def SaveTensor3_C(self, name, type, IN_ARRAY3, DIM1, DIM2, DIM3):
        return _IVStudio.IPStudio_SaveTensor3_C(self, name, type, IN_ARRAY3, DIM1, DIM2, DIM3)

    def SaveTensor2(self, name, type, IN_ARRAY2):
        return _IVStudio.IPStudio_SaveTensor2(self, name, type, IN_ARRAY2)

    def SaveTensor2_F(self, name, type, IN_ARRAY2):
        return _IVStudio.IPStudio_SaveTensor2_F(self, name, type, IN_ARRAY2)

    def SaveTensor2_I(self, name, type, IN_ARRAY2):
        return _IVStudio.IPStudio_SaveTensor2_I(self, name, type, IN_ARRAY2)

    def SaveTensor2_S(self, name, type, IN_ARRAY2):
        return _IVStudio.IPStudio_SaveTensor2_S(self, name, type, IN_ARRAY2)

    def SaveTensor2_C(self, name, type, IN_ARRAY2, DIM1, DIM2):
        return _IVStudio.IPStudio_SaveTensor2_C(self, name, type, IN_ARRAY2, DIM1, DIM2)

    def SaveTensor1(self, name, type, IN_ARRAY1):
        return _IVStudio.IPStudio_SaveTensor1(self, name, type, IN_ARRAY1)

    def SaveTensor1_F(self, name, type, IN_ARRAY1):
        return _IVStudio.IPStudio_SaveTensor1_F(self, name, type, IN_ARRAY1)

    def SaveTensor1_I(self, name, type, IN_ARRAY1):
        return _IVStudio.IPStudio_SaveTensor1_I(self, name, type, IN_ARRAY1)

    def SaveTensor1_S(self, name, type, IN_ARRAY1):
        return _IVStudio.IPStudio_SaveTensor1_S(self, name, type, IN_ARRAY1)

    def SaveTensor1_C(self, name, type, IN_ARRAY1, DIM1):
        return _IVStudio.IPStudio_SaveTensor1_C(self, name, type, IN_ARRAY1, DIM1)

    def SaveScalar(self, name, value):
        return _IVStudio.IPStudio_SaveScalar(self, name, value)

    def SaveText(self, name, text):
        return _IVStudio.IPStudio_SaveText(self, name, text)

    def SaveWaveform2(self, name, IN_ARRAY2, samplerate):
        return _IVStudio.IPStudio_SaveWaveform2(self, name, IN_ARRAY2, samplerate)

    def SaveWaveform2_F(self, name, IN_ARRAY2, samplerate):
        return _IVStudio.IPStudio_SaveWaveform2_F(self, name, IN_ARRAY2, samplerate)

    def SaveWaveform2_I(self, name, IN_ARRAY2, samplerate):
        return _IVStudio.IPStudio_SaveWaveform2_I(self, name, IN_ARRAY2, samplerate)

    def SaveWaveform2_S(self, name, IN_ARRAY2, samplerate):
        return _IVStudio.IPStudio_SaveWaveform2_S(self, name, IN_ARRAY2, samplerate)

    def SaveWaveform2_C(self, name, IN_ARRAY2, DIM1, DIM2, samplerate):
        return _IVStudio.IPStudio_SaveWaveform2_C(self, name, IN_ARRAY2, DIM1, DIM2, samplerate)

    def SaveWaveform1(self, name, IN_ARRAY1, samplerate):
        return _IVStudio.IPStudio_SaveWaveform1(self, name, IN_ARRAY1, samplerate)

    def SaveWaveform1_F(self, name, IN_ARRAY1, samplerate):
        return _IVStudio.IPStudio_SaveWaveform1_F(self, name, IN_ARRAY1, samplerate)

    def SaveWaveform1_I(self, name, IN_ARRAY1, samplerate):
        return _IVStudio.IPStudio_SaveWaveform1_I(self, name, IN_ARRAY1, samplerate)

    def SaveWaveform1_S(self, name, IN_ARRAY1, samplerate):
        return _IVStudio.IPStudio_SaveWaveform1_S(self, name, IN_ARRAY1, samplerate)

    def SaveWaveform1_C(self, name, IN_ARRAY1, DIM1, samplerate):
        return _IVStudio.IPStudio_SaveWaveform1_C(self, name, IN_ARRAY1, DIM1, samplerate)

    def StartSaveGraphDef(self):
        return _IVStudio.IPStudio_StartSaveGraphDef(self)

    def CloseSaveGraphDef(self):
        return _IVStudio.IPStudio_CloseSaveGraphDef(self)

    def AddNodeGraphDef(self, name, opname):
        return _IVStudio.IPStudio_AddNodeGraphDef(self, name, opname)

    def CloseNodeGraphDef(self):
        return _IVStudio.IPStudio_CloseNodeGraphDef(self)

    def AddNodeInputGraphDef(self, name):
        return _IVStudio.IPStudio_AddNodeInputGraphDef(self, name)

    def AddNodeAttrGraphDef(self, name, v):
        return _IVStudio.IPStudio_AddNodeAttrGraphDef(self, name, v)

    def LogOutput(self, type, name):
        return _IVStudio.IPStudio_LogOutput(self, type, name)
IPStudio_swigregister = _IVStudio.IPStudio_swigregister
IPStudio_swigregister(IPStudio)

class IPShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPShell, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _IVStudio.new_IPShell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPShell
    __del__ = lambda self: None

    def ShellOutput(self, type, name):
        return _IVStudio.IPShell_ShellOutput(self, type, name)

    def ShellInput(self):
        return _IVStudio.IPShell_ShellInput(self)
IPShell_swigregister = _IVStudio.IPShell_swigregister
IPShell_swigregister(IPShell)

class IPRun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPRun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPRun, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _IVStudio.new_IPRun()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPRun
    __del__ = lambda self: None

    def DebugStart(self):
        return _IVStudio.IPRun_DebugStart(self)

    def RunOutput(self, type, name):
        return _IVStudio.IPRun_RunOutput(self, type, name)

    def DebugInfoCallback(self, msgID, data, size):
        return _IVStudio.IPRun_DebugInfoCallback(self, msgID, data, size)

    def DebugInfoOutput(self, type, data):
        return _IVStudio.IPRun_DebugInfoOutput(self, type, data)

    def DebugInfoStatus(self, type, status):
        return _IVStudio.IPRun_DebugInfoStatus(self, type, status)

    def IsBreakPoint(self, name, line):
        return _IVStudio.IPRun_IsBreakPoint(self, name, line)

    def WaitAtBreakPoint(self, name, line):
        return _IVStudio.IPRun_WaitAtBreakPoint(self, name, line)

    def GetBreakPoint(self):
        return _IVStudio.IPRun_GetBreakPoint(self)

    def GetWatchVariable(self, index):
        return _IVStudio.IPRun_GetWatchVariable(self, index)
IPRun_swigregister = _IVStudio.IPRun_swigregister
IPRun_swigregister(IPRun)

# This file is compatible with both classic and new-style classes.


