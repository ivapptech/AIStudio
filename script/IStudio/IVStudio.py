# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import numpy as np
import os, sys
moduleDir =os.path.abspath(os.path.realpath(os.path.dirname(__file__)) + os.sep + "../../binary")
sys.path.append(moduleDir)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IVStudio')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IVStudio')
    _IVStudio = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IVStudio', [dirname(__file__)])
        except ImportError:
            import _IVStudio
            return _IVStudio
        try:
            _mod = imp.load_module('_IVStudio', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IVStudio = swig_import_helper()
    del swig_import_helper
else:
    import _IVStudio
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def capsule_cleanup(*args):
    return _IVStudio.capsule_cleanup(*args)
capsule_cleanup = _IVStudio.capsule_cleanup
class IPPlot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPlot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPPlot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetName(self, *args):
        return _IVStudio.IPPlot_SetName(self, *args)

    def ModifyOption(self, *args):
        return _IVStudio.IPPlot_ModifyOption(self, *args)

    def SetVisible(self, *args):
        return _IVStudio.IPPlot_SetVisible(self, *args)

    def SetPlotStyle(self, *args):
        return _IVStudio.IPPlot_SetPlotStyle(self, *args)

    def SetLineStyle(self, *args):
        return _IVStudio.IPPlot_SetLineStyle(self, *args)

    def SetLineColor(self, *args):
        return _IVStudio.IPPlot_SetLineColor(self, *args)

    def SetLineWidth(self, *args):
        return _IVStudio.IPPlot_SetLineWidth(self, *args)

    def SetPointStyle(self, *args):
        return _IVStudio.IPPlot_SetPointStyle(self, *args)

    def SetPointColor(self, *args):
        return _IVStudio.IPPlot_SetPointColor(self, *args)

    def SetPointBorderWidth(self, *args):
        return _IVStudio.IPPlot_SetPointBorderWidth(self, *args)

    def SetPointFillColor(self, *args):
        return _IVStudio.IPPlot_SetPointFillColor(self, *args)

    def SetPointSize(self, *args):
        return _IVStudio.IPPlot_SetPointSize(self, *args)

    def SetXAxis(self, *args):
        return _IVStudio.IPPlot_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        return _IVStudio.IPPlot_SetYAxis(self, *args)

    def PlotY(self, *args):
        return _IVStudio.IPPlot_PlotY(self, *args)

    def PlotXRange(self, *args):
        return _IVStudio.IPPlot_PlotXRange(self, *args)

    def PlotX(self, *args):
        return _IVStudio.IPPlot_PlotX(self, *args)

    def PlotYRange(self, *args):
        return _IVStudio.IPPlot_PlotYRange(self, *args)

    def PlotXY(self, *args):
        return _IVStudio.IPPlot_PlotXY(self, *args)

    def ChartY(self, *args):
        return _IVStudio.IPPlot_ChartY(self, *args)

    def ChartXRange(self, *args):
        return _IVStudio.IPPlot_ChartXRange(self, *args)

    def ChartRollbackY(self, *args):
        return _IVStudio.IPPlot_ChartRollbackY(self, *args)

    def ChartX(self, *args):
        return _IVStudio.IPPlot_ChartX(self, *args)

    def ChartYRange(self, *args):
        return _IVStudio.IPPlot_ChartYRange(self, *args)

    def ChartRollbackX(self, *args):
        return _IVStudio.IPPlot_ChartRollbackX(self, *args)

    def ChartXY(self, *args):
        return _IVStudio.IPPlot_ChartXY(self, *args)

    def ChartXYRange(self, *args):
        return _IVStudio.IPPlot_ChartXYRange(self, *args)

    def SetDataOffset(self, *args):
        return _IVStudio.IPPlot_SetDataOffset(self, *args)

    def ImageRange(self, *args):
        return _IVStudio.IPPlot_ImageRange(self, *args)

    def ImageColor1(self, *args):
        return _IVStudio.IPPlot_ImageColor1(self, *args)

    def ImageColor1_F(self, *args):
        return _IVStudio.IPPlot_ImageColor1_F(self, *args)

    def ImageColor1_I(self, *args):
        return _IVStudio.IPPlot_ImageColor1_I(self, *args)

    def ImageColor1_S(self, *args):
        return _IVStudio.IPPlot_ImageColor1_S(self, *args)

    def ImageColor1_C(self, *args):
        return _IVStudio.IPPlot_ImageColor1_C(self, *args)

    def ImageColor2(self, *args):
        return _IVStudio.IPPlot_ImageColor2(self, *args)

    def ImageColor2_F(self, *args):
        return _IVStudio.IPPlot_ImageColor2_F(self, *args)

    def ImageColor2_I(self, *args):
        return _IVStudio.IPPlot_ImageColor2_I(self, *args)

    def ImageColor2_S(self, *args):
        return _IVStudio.IPPlot_ImageColor2_S(self, *args)

    def ImageColor2_C(self, *args):
        return _IVStudio.IPPlot_ImageColor2_C(self, *args)

    def ImageColor4(self, *args):
        return _IVStudio.IPPlot_ImageColor4(self, *args)

    def ImageColor4_F(self, *args):
        return _IVStudio.IPPlot_ImageColor4_F(self, *args)

    def ImageColor4_I(self, *args):
        return _IVStudio.IPPlot_ImageColor4_I(self, *args)

    def ImageColor4_S(self, *args):
        return _IVStudio.IPPlot_ImageColor4_S(self, *args)

    def ImageColor4_C(self, *args):
        return _IVStudio.IPPlot_ImageColor4_C(self, *args)

    def Bar(self, *args):
        return _IVStudio.IPPlot_Bar(self, *args)

    def BarLabel(self, *args):
        return _IVStudio.IPPlot_BarLabel(self, *args)

    def BarData(self, *args):
        return _IVStudio.IPPlot_BarData(self, *args)

    def BarColor(self, *args):
        return _IVStudio.IPPlot_BarColor(self, *args)

    def SetBarPara(self, *args):
        return _IVStudio.IPPlot_SetBarPara(self, *args)

    def Pie(self, *args):
        return _IVStudio.IPPlot_Pie(self, *args)

    def PieLabel(self, *args):
        return _IVStudio.IPPlot_PieLabel(self, *args)

    def PieData(self, *args):
        return _IVStudio.IPPlot_PieData(self, *args)

    def PieColor(self, *args):
        return _IVStudio.IPPlot_PieColor(self, *args)

    def SetPieColor(self, *args):
        return _IVStudio.IPPlot_SetPieColor(self, *args)

    def SetPieOffset(self, *args):
        return _IVStudio.IPPlot_SetPieOffset(self, *args)

    def SetPieLabelOffset(self, *args):
        return _IVStudio.IPPlot_SetPieLabelOffset(self, *args)

    def SetPiePara(self, *args):
        return _IVStudio.IPPlot_SetPiePara(self, *args)

    def SetPie3DPara(self, *args):
        return _IVStudio.IPPlot_SetPie3DPara(self, *args)

    def VectorXY(self, *args):
        return _IVStudio.IPPlot_VectorXY(self, *args)

    def VectorAL(self, *args):
        return _IVStudio.IPPlot_VectorAL(self, *args)

    def SetVectorPara(self, *args):
        return _IVStudio.IPPlot_SetVectorPara(self, *args)

    def BubbleXY(self, *args):
        return _IVStudio.IPPlot_BubbleXY(self, *args)

    def SetBubblePara(self, *args):
        return _IVStudio.IPPlot_SetBubblePara(self, *args)

    def SetErrorPercent(self, *args):
        return _IVStudio.IPPlot_SetErrorPercent(self, *args)

    def SetErrorUpData(self, *args):
        return _IVStudio.IPPlot_SetErrorUpData(self, *args)

    def SetErrorLowData(self, *args):
        return _IVStudio.IPPlot_SetErrorLowData(self, *args)

    def SetErrorStyle(self, *args):
        return _IVStudio.IPPlot_SetErrorStyle(self, *args)

    def PlotZ(self, *args):
        return _IVStudio.IPPlot_PlotZ(self, *args)

    def PlotZRange(self, *args):
        return _IVStudio.IPPlot_PlotZRange(self, *args)

    def ChartZ(self, *args):
        return _IVStudio.IPPlot_ChartZ(self, *args)

    def ChartZRange(self, *args):
        return _IVStudio.IPPlot_ChartZRange(self, *args)

    def ChartRollbackZ(self, *args):
        return _IVStudio.IPPlot_ChartRollbackZ(self, *args)

    def ChartXYZ(self, *args):
        return _IVStudio.IPPlot_ChartXYZ(self, *args)

    def ChartXYZRange(self, *args):
        return _IVStudio.IPPlot_ChartXYZRange(self, *args)

    def PlotXYZCurve(self, *args):
        return _IVStudio.IPPlot_PlotXYZCurve(self, *args)

    def SurfaceXYZ(self, *args):
        return _IVStudio.IPPlot_SurfaceXYZ(self, *args)

    def SurfaceXYZ2(self, *args):
        return _IVStudio.IPPlot_SurfaceXYZ2(self, *args)

    def SurfaceXYZParametric(self, *args):
        return _IVStudio.IPPlot_SurfaceXYZParametric(self, *args)

    def SurfaceXYZParametric2(self, *args):
        return _IVStudio.IPPlot_SurfaceXYZParametric2(self, *args)

    def SurfaceZ(self, *args):
        return _IVStudio.IPPlot_SurfaceZ(self, *args)

    def SurfaceZ2(self, *args):
        return _IVStudio.IPPlot_SurfaceZ2(self, *args)

    def SurfaceRange(self, *args):
        return _IVStudio.IPPlot_SurfaceRange(self, *args)

    def SurfaceImage(self, *args):
        return _IVStudio.IPPlot_SurfaceImage(self, *args)

    def VolumnRange(self, *args):
        return _IVStudio.IPPlot_VolumnRange(self, *args)

    def VolumnData(self, *args):
        return _IVStudio.IPPlot_VolumnData(self, *args)

    def SetVolumnDisplayType(self, *args):
        return _IVStudio.IPPlot_SetVolumnDisplayType(self, *args)

    def SetVolumeCutPosition(self, *args):
        return _IVStudio.IPPlot_SetVolumeCutPosition(self, *args)

    def Bar3D(self, *args):
        return _IVStudio.IPPlot_Bar3D(self, *args)

    def BarLabel3D(self, *args):
        return _IVStudio.IPPlot_BarLabel3D(self, *args)

    def VectorXYZ(self, *args):
        return _IVStudio.IPPlot_VectorXYZ(self, *args)

    def VectorABL(self, *args):
        return _IVStudio.IPPlot_VectorABL(self, *args)

    def BubbleXYZ(self, *args):
        return _IVStudio.IPPlot_BubbleXYZ(self, *args)

    def ImageColor(self, *args):
       if isinstance(args[0], np.ndarray):
          if args[0].ndim == 1:
              if args[0].dtype == np.float64:
                val = self.ImageColor1(*args)
              elif args[0].dtype == np.float32:
                val = self.ImageColor1_F(*args)
              elif args[0].dtype == np.int32:
                val = self.ImageColor1_I(*args)
              elif args[0].dtype == np.int16 or args[0].dtype == np.uint16:
                val = self.ImageColor1_S(*args)
              elif args[0].dtype == np.int8 or args[0].dtype == np.uint8:
                val = selfImageColor1_C(*args)
              else:
                val = self.ImageColor1(*args)
          if args[0].ndim == 2:
              if args[0].dtype == np.float64:
                val = self.ImageColor2(*args)
              elif args[0].dtype == np.float32:
                val = self.ImageColor2_F(*args)
              elif args[0].dtype == np.int32:
                val = self.ImageColor2_I(*args)
              elif args[0].dtype == np.int16 or args[0].dtype == np.uint16:
                val = self.ImageColor2_S(*args)
              elif args[0].dtype == np.int8 or args[0].dtype == np.uint8:
                val = selfImageColor2_C(*args)
              else:
                val = self.ImageColor2(*args)
          elif args[0].ndim == 4:
              if args[0].dtype == np.float64:
                val = self.ImageColor4(*args)
              elif args[0].dtype == np.float32:
                val = self.ImageColor4_F(*args)
              elif args[0].dtype == np.int32:
                val = self.ImageColor4_I(*args)
              elif args[0].dtype == np.int16 or args[0].dtype == np.uint16:
                val = self.ImageColor4_S(*args)
              elif args[0].dtype == np.int8 or args[0].dtype == np.uint8:
                val = selfImageColor4_C(*args)
              else:
                val = self.ImageColor4(*args)
          else:
            val = 0
       else:
          val = 0
       return val

    __swig_destroy__ = _IVStudio.delete_IPPlot
    __del__ = lambda self: None
IPPlot_swigregister = _IVStudio.IPPlot_swigregister
IPPlot_swigregister(IPPlot)

class IPAxis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAxis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAxis, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTitle(self, *args):
        return _IVStudio.IPAxis_SetTitle(self, *args)

    def SetTitleColor(self, *args):
        return _IVStudio.IPAxis_SetTitleColor(self, *args)

    def ModifyOption(self, *args):
        return _IVStudio.IPAxis_ModifyOption(self, *args)

    def SetAxisType(self, *args):
        return _IVStudio.IPAxis_SetAxisType(self, *args)

    def SetMinimum(self, *args):
        return _IVStudio.IPAxis_SetMinimum(self, *args)

    def SetMaximum(self, *args):
        return _IVStudio.IPAxis_SetMaximum(self, *args)

    def GetMinimum(self, *args):
        return _IVStudio.IPAxis_GetMinimum(self, *args)

    def GetMaximum(self, *args):
        return _IVStudio.IPAxis_GetMaximum(self, *args)

    def SetTickLabelFont(self, *args):
        return _IVStudio.IPAxis_SetTickLabelFont(self, *args)

    def SetTickColor(self, *args):
        return _IVStudio.IPAxis_SetTickColor(self, *args)

    def SetTickPadding(self, *args):
        return _IVStudio.IPAxis_SetTickPadding(self, *args)

    def SetTickMajorSize(self, *args):
        return _IVStudio.IPAxis_SetTickMajorSize(self, *args)

    def SetTickMinorSize(self, *args):
        return _IVStudio.IPAxis_SetTickMinorSize(self, *args)

    def SetTickScaling(self, *args):
        return _IVStudio.IPAxis_SetTickScaling(self, *args)

    def SetMajorTickRange(self, *args):
        return _IVStudio.IPAxis_SetMajorTickRange(self, *args)

    def SetMajorTickNumber(self, *args):
        return _IVStudio.IPAxis_SetMajorTickNumber(self, *args)

    def SetMinorTickNumber(self, *args):
        return _IVStudio.IPAxis_SetMinorTickNumber(self, *args)

    def SetMajorGridColor(self, *args):
        return _IVStudio.IPAxis_SetMajorGridColor(self, *args)

    def SetMajorGridStyle(self, *args):
        return _IVStudio.IPAxis_SetMajorGridStyle(self, *args)

    def SetMajorGridWidth(self, *args):
        return _IVStudio.IPAxis_SetMajorGridWidth(self, *args)

    def SetMinorGridColor(self, *args):
        return _IVStudio.IPAxis_SetMinorGridColor(self, *args)

    def SetMinorGridStyle(self, *args):
        return _IVStudio.IPAxis_SetMinorGridStyle(self, *args)

    def SetMinorGridWidth(self, *args):
        return _IVStudio.IPAxis_SetMinorGridWidth(self, *args)

    def ModifyValuePairOption(self, *args):
        return _IVStudio.IPAxis_ModifyValuePairOption(self, *args)

    def AddValuePair(self, *args):
        return _IVStudio.IPAxis_AddValuePair(self, *args)

    def SetValuePair(self, *args):
        return _IVStudio.IPAxis_SetValuePair(self, *args)

    def RemoveVaulePair(self, *args):
        return _IVStudio.IPAxis_RemoveVaulePair(self, *args)

    def RemoveVaulePairAll(self, *args):
        return _IVStudio.IPAxis_RemoveVaulePairAll(self, *args)

    def SetTickLabelOrientation(self, *args):
        return _IVStudio.IPAxis_SetTickLabelOrientation(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPAxis
    __del__ = lambda self: None
IPAxis_swigregister = _IVStudio.IPAxis_swigregister
IPAxis_swigregister(IPAxis)

class IPCursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPCursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPCursor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ModifyOption(self, *args):
        return _IVStudio.IPCursor_ModifyOption(self, *args)

    def GetCursorPos(self, *args):
        return _IVStudio.IPCursor_GetCursorPos(self, *args)

    def SetCursorPos(self, *args):
        return _IVStudio.IPCursor_SetCursorPos(self, *args)

    def SetColor(self, *args):
        return _IVStudio.IPCursor_SetColor(self, *args)

    def SetLineStyle(self, *args):
        return _IVStudio.IPCursor_SetLineStyle(self, *args)

    def SetLineWidth(self, *args):
        return _IVStudio.IPCursor_SetLineWidth(self, *args)

    def SetCursorStyle(self, *args):
        return _IVStudio.IPCursor_SetCursorStyle(self, *args)

    def SetWidth(self, *args):
        return _IVStudio.IPCursor_SetWidth(self, *args)

    def SetHeight(self, *args):
        return _IVStudio.IPCursor_SetHeight(self, *args)

    def SetLabelColor(self, *args):
        return _IVStudio.IPCursor_SetLabelColor(self, *args)

    def SetLabelFont(self, *args):
        return _IVStudio.IPCursor_SetLabelFont(self, *args)

    def SetLabelDecimal(self, *args):
        return _IVStudio.IPCursor_SetLabelDecimal(self, *args)

    def SetSnapMode(self, *args):
        return _IVStudio.IPCursor_SetSnapMode(self, *args)

    def SetSnapPlot(self, *args):
        return _IVStudio.IPCursor_SetSnapPlot(self, *args)

    def GetCursorPos3D(self, *args):
        return _IVStudio.IPCursor_GetCursorPos3D(self, *args)

    def SetCursorPos3D(self, *args):
        return _IVStudio.IPCursor_SetCursorPos3D(self, *args)

    def SetLength(self, *args):
        return _IVStudio.IPCursor_SetLength(self, *args)

    def SetTextOrientation(self, *args):
        return _IVStudio.IPCursor_SetTextOrientation(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPCursor
    __del__ = lambda self: None
IPCursor_swigregister = _IVStudio.IPCursor_swigregister
IPCursor_swigregister(IPCursor)

class IPDrawItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDrawItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDrawItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetType(self, *args):
        return _IVStudio.IPDrawItem_GetType(self, *args)

    def SetLineStyle(self, *args):
        return _IVStudio.IPDrawItem_SetLineStyle(self, *args)

    def SetLineWidth(self, *args):
        return _IVStudio.IPDrawItem_SetLineWidth(self, *args)

    def SetLineColor(self, *args):
        return _IVStudio.IPDrawItem_SetLineColor(self, *args)

    def SetLineBeginCap(self, *args):
        return _IVStudio.IPDrawItem_SetLineBeginCap(self, *args)

    def SetLineEndCap(self, *args):
        return _IVStudio.IPDrawItem_SetLineEndCap(self, *args)

    def SetFillStyle(self, *args):
        return _IVStudio.IPDrawItem_SetFillStyle(self, *args)

    def SetFillColor(self, *args):
        return _IVStudio.IPDrawItem_SetFillColor(self, *args)

    def SetFont(self, *args):
        return _IVStudio.IPDrawItem_SetFont(self, *args)

    def SetTextColor(self, *args):
        return _IVStudio.IPDrawItem_SetTextColor(self, *args)

    def SetOptions(self, *args):
        return _IVStudio.IPDrawItem_SetOptions(self, *args)

    def SetText(self, *args):
        return _IVStudio.IPDrawItem_SetText(self, *args)

    def SetAlignment(self, *args):
        return _IVStudio.IPDrawItem_SetAlignment(self, *args)

    def SetCoordinates(self, *args):
        return _IVStudio.IPDrawItem_SetCoordinates(self, *args)

    def SetCoordinates3D(self, *args):
        return _IVStudio.IPDrawItem_SetCoordinates3D(self, *args)

    def SetRotation(self, *args):
        return _IVStudio.IPDrawItem_SetRotation(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPDrawItem
    __del__ = lambda self: None
IPDrawItem_swigregister = _IVStudio.IPDrawItem_swigregister
IPDrawItem_swigregister(IPDrawItem)

class IPDrawGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDrawGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDrawGroup, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddGroup(self, *args):
        return _IVStudio.IPDrawGroup_AddGroup(self, *args)

    def RemoveGroup(self, *args):
        return _IVStudio.IPDrawGroup_RemoveGroup(self, *args)

    def FindGroup(self, *args):
        return _IVStudio.IPDrawGroup_FindGroup(self, *args)

    def AddItem(self, *args):
        return _IVStudio.IPDrawGroup_AddItem(self, *args)

    def FindItem(self, *args):
        return _IVStudio.IPDrawGroup_FindItem(self, *args)

    def DeleteItem(self, *args):
        return _IVStudio.IPDrawGroup_DeleteItem(self, *args)

    def RemoveAllItems(self, *args):
        return _IVStudio.IPDrawGroup_RemoveAllItems(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPDrawGroup
    __del__ = lambda self: None
IPDrawGroup_swigregister = _IVStudio.IPDrawGroup_swigregister
IPDrawGroup_swigregister(IPDrawGroup)

class IPAnnotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAnnotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAnnotation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetCaption(self, *args):
        return _IVStudio.IPAnnotation_SetCaption(self, *args)

    def SetCaptionColor(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionColor(self, *args)

    def SetCaptionBorder(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionBorder(self, *args)

    def SetCaptionLocation(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionLocation(self, *args)

    def SetArrowLineWidth(self, *args):
        return _IVStudio.IPAnnotation_SetArrowLineWidth(self, *args)

    def SetArrowLineColor(self, *args):
        return _IVStudio.IPAnnotation_SetArrowLineColor(self, *args)

    def SetArrowLineStyle(self, *args):
        return _IVStudio.IPAnnotation_SetArrowLineStyle(self, *args)

    def SetArrowTailStyle(self, *args):
        return _IVStudio.IPAnnotation_SetArrowTailStyle(self, *args)

    def SetArrowHeadStyle(self, *args):
        return _IVStudio.IPAnnotation_SetArrowHeadStyle(self, *args)

    def SetArrowHeadPos(self, *args):
        return _IVStudio.IPAnnotation_SetArrowHeadPos(self, *args)

    def SetDrawType(self, *args):
        return _IVStudio.IPAnnotation_SetDrawType(self, *args)

    def SetCaptionLocation3D(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionLocation3D(self, *args)

    def SetCaptionOrientation(self, *args):
        return _IVStudio.IPAnnotation_SetCaptionOrientation(self, *args)

    def SetArrowHeadPos3D(self, *args):
        return _IVStudio.IPAnnotation_SetArrowHeadPos3D(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPAnnotation
    __del__ = lambda self: None
IPAnnotation_swigregister = _IVStudio.IPAnnotation_swigregister
IPAnnotation_swigregister(IPAnnotation)

class IPLight3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPLight3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPLight3D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ModifyOption(self, *args):
        return _IVStudio.IPLight3D_ModifyOption(self, *args)

    def SetDirection(self, *args):
        return _IVStudio.IPLight3D_SetDirection(self, *args)

    def SetPosition(self, *args):
        return _IVStudio.IPLight3D_SetPosition(self, *args)

    def SetDirectionLight(self, *args):
        return _IVStudio.IPLight3D_SetDirectionLight(self, *args)

    def SetPointLight(self, *args):
        return _IVStudio.IPLight3D_SetPointLight(self, *args)

    def SetSpotLight(self, *args):
        return _IVStudio.IPLight3D_SetSpotLight(self, *args)

    def SetColor(self, *args):
        return _IVStudio.IPLight3D_SetColor(self, *args)

    def SetAttenuation(self, *args):
        return _IVStudio.IPLight3D_SetAttenuation(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPLight3D
    __del__ = lambda self: None
IPLight3D_swigregister = _IVStudio.IPLight3D_swigregister
IPLight3D_swigregister(IPLight3D)

class IPPalette(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPPalette, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPPalette, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ModifyOption(self, *args):
        return _IVStudio.IPPalette_ModifyOption(self, *args)

    def SetTitle(self, *args):
        return _IVStudio.IPPalette_SetTitle(self, *args)

    def SetAlign(self, *args):
        return _IVStudio.IPPalette_SetAlign(self, *args)

    def SetTransparency(self, *args):
        return _IVStudio.IPPalette_SetTransparency(self, *args)

    def SetMaximumScale(self, *args):
        return _IVStudio.IPPalette_SetMaximumScale(self, *args)

    def SetMinimumScale(self, *args):
        return _IVStudio.IPPalette_SetMinimumScale(self, *args)

    def GetColor(self, *args):
        return _IVStudio.IPPalette_GetColor(self, *args)

    def SetColor(self, *args):
        return _IVStudio.IPPalette_SetColor(self, *args)

    def SetLevelNum(self, *args):
        return _IVStudio.IPPalette_SetLevelNum(self, *args)

    def SetLevelValue(self, *args):
        return _IVStudio.IPPalette_SetLevelValue(self, *args)

    def SetLevelType(self, *args):
        return _IVStudio.IPPalette_SetLevelType(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPPalette
    __del__ = lambda self: None
IPPalette_swigregister = _IVStudio.IPPalette_swigregister
IPPalette_swigregister(IPPalette)

class IPLegend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPLegend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPLegend, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetVisible(self, *args):
        return _IVStudio.IPLegend_SetVisible(self, *args)

    def SetLength(self, *args):
        return _IVStudio.IPLegend_SetLength(self, *args)

    def SetSpace(self, *args):
        return _IVStudio.IPLegend_SetSpace(self, *args)

    def SetLocationSide(self, *args):
        return _IVStudio.IPLegend_SetLocationSide(self, *args)

    def SetFont(self, *args):
        return _IVStudio.IPLegend_SetFont(self, *args)
    __swig_destroy__ = _IVStudio.delete_IPLegend
    __del__ = lambda self: None
IPLegend_swigregister = _IVStudio.IPLegend_swigregister
IPLegend_swigregister(IPLegend)

class IPGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPGraph, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPGraph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPGraph
    __del__ = lambda self: None
    __swig_setmethods__["graph_id"] = _IVStudio.IPGraph_graph_id_set
    __swig_getmethods__["graph_id"] = _IVStudio.IPGraph_graph_id_get
    if _newclass:
        graph_id = _swig_property(_IVStudio.IPGraph_graph_id_get, _IVStudio.IPGraph_graph_id_set)

    def SetGraphQuality(self, *args):
        return _IVStudio.IPGraph_SetGraphQuality(self, *args)

    def SetGraphCategory(self, *args):
        return _IVStudio.IPGraph_SetGraphCategory(self, *args)

    def RedrawPlotArea(self, *args):
        return _IVStudio.IPGraph_RedrawPlotArea(self, *args)

    def RedrawGraph(self, *args):
        return _IVStudio.IPGraph_RedrawGraph(self, *args)

    def SetDisplayOrder(self, *args):
        return _IVStudio.IPGraph_SetDisplayOrder(self, *args)

    def SetMouseTrackingMode(self, *args):
        return _IVStudio.IPGraph_SetMouseTrackingMode(self, *args)

    def SetFrameColor(self, *args):
        return _IVStudio.IPGraph_SetFrameColor(self, *args)

    def SetPlotAreaColor(self, *args):
        return _IVStudio.IPGraph_SetPlotAreaColor(self, *args)

    def SetCaption(self, *args):
        return _IVStudio.IPGraph_SetCaption(self, *args)

    def SetCaptionAlign(self, *args):
        return _IVStudio.IPGraph_SetCaptionAlign(self, *args)

    def SetCaptionColor(self, *args):
        return _IVStudio.IPGraph_SetCaptionColor(self, *args)

    def GetAxisCount(self, *args):
        return _IVStudio.IPGraph_GetAxisCount(self, *args)

    def Axes(self, *args):
        return _IVStudio.IPGraph_Axes(self, *args)

    def NewAxis(self, *args):
        return _IVStudio.IPGraph_NewAxis(self, *args)

    def RemoveAxis(self, *args):
        return _IVStudio.IPGraph_RemoveAxis(self, *args)

    def GetPlotCount(self, *args):
        return _IVStudio.IPGraph_GetPlotCount(self, *args)

    def Plots(self, *args):
        return _IVStudio.IPGraph_Plots(self, *args)

    def NewPlot(self, *args):
        return _IVStudio.IPGraph_NewPlot(self, *args)

    def RemovePlot(self, *args):
        return _IVStudio.IPGraph_RemovePlot(self, *args)

    def Set3DBarOffset(self, *args):
        return _IVStudio.IPGraph_Set3DBarOffset(self, *args)

    def GetLegend(self, *args):
        return _IVStudio.IPGraph_GetLegend(self, *args)

    def GetCursorCount(self, *args):
        return _IVStudio.IPGraph_GetCursorCount(self, *args)

    def Cursors(self, *args):
        return _IVStudio.IPGraph_Cursors(self, *args)

    def NewCursor(self, *args):
        return _IVStudio.IPGraph_NewCursor(self, *args)

    def RemoveCursor(self, *args):
        return _IVStudio.IPGraph_RemoveCursor(self, *args)

    def GetAnnotationCount(self, *args):
        return _IVStudio.IPGraph_GetAnnotationCount(self, *args)

    def Annotations(self, *args):
        return _IVStudio.IPGraph_Annotations(self, *args)

    def NewAnnotation(self, *args):
        return _IVStudio.IPGraph_NewAnnotation(self, *args)

    def RemoveAnnotation(self, *args):
        return _IVStudio.IPGraph_RemoveAnnotation(self, *args)

    def ShowAnnotationEditBar(self, *args):
        return _IVStudio.IPGraph_ShowAnnotationEditBar(self, *args)

    def GetPalette(self, *args):
        return _IVStudio.IPGraph_GetPalette(self, *args)

    def SetPalette(self, *args):
        return _IVStudio.IPGraph_SetPalette(self, *args)

    def SetSkyBackground(self, *args):
        return _IVStudio.IPGraph_SetSkyBackground(self, *args)

    def SetProjectionType(self, *args):
        return _IVStudio.IPGraph_SetProjectionType(self, *args)

    def SetOrientation(self, *args):
        return _IVStudio.IPGraph_SetOrientation(self, *args)

    def SetViewCenter(self, *args):
        return _IVStudio.IPGraph_SetViewCenter(self, *args)

    def SetScale(self, *args):
        return _IVStudio.IPGraph_SetScale(self, *args)

    def SetPlotAreaScale(self, *args):
        return _IVStudio.IPGraph_SetPlotAreaScale(self, *args)

    def SetClip(self, *args):
        return _IVStudio.IPGraph_SetClip(self, *args)

    def GetLightCount(self, *args):
        return _IVStudio.IPGraph_GetLightCount(self, *args)

    def NewLight(self, *args):
        return _IVStudio.IPGraph_NewLight(self, *args)

    def Lights(self, *args):
        return _IVStudio.IPGraph_Lights(self, *args)

    def RemoveLight(self, *args):
        return _IVStudio.IPGraph_RemoveLight(self, *args)
IPGraph_swigregister = _IVStudio.IPGraph_swigregister
IPGraph_swigregister(IPGraph)

class IPDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDraw, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPDraw(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPDraw
    __del__ = lambda self: None
    __swig_setmethods__["draw_id"] = _IVStudio.IPDraw_draw_id_set
    __swig_getmethods__["draw_id"] = _IVStudio.IPDraw_draw_id_get
    if _newclass:
        draw_id = _swig_property(_IVStudio.IPDraw_draw_id_get, _IVStudio.IPDraw_draw_id_set)

    def SetBackgroundColor(self, *args):
        return _IVStudio.IPDraw_SetBackgroundColor(self, *args)

    def SetPageSize(self, *args):
        return _IVStudio.IPDraw_SetPageSize(self, *args)

    def SetZoomMode(self, *args):
        return _IVStudio.IPDraw_SetZoomMode(self, *args)

    def ShowDrawTools(self, *args):
        return _IVStudio.IPDraw_ShowDrawTools(self, *args)

    def GetDrawModel(self, *args):
        return _IVStudio.IPDraw_GetDrawModel(self, *args)

    def AddDrawGroup(self, *args):
        return _IVStudio.IPDraw_AddDrawGroup(self, *args)

    def FindDrawGroup(self, *args):
        return _IVStudio.IPDraw_FindDrawGroup(self, *args)

    def SetActiveDrawGroup(self, *args):
        return _IVStudio.IPDraw_SetActiveDrawGroup(self, *args)

    def AddDrawItem(self, *args):
        return _IVStudio.IPDraw_AddDrawItem(self, *args)

    def FindDrawItem(self, *args):
        return _IVStudio.IPDraw_FindDrawItem(self, *args)

    def DeleteDrawItem(self, *args):
        return _IVStudio.IPDraw_DeleteDrawItem(self, *args)

    def RemoveCursor(self, *args):
        return _IVStudio.IPDraw_RemoveCursor(self, *args)

    def AddCursor(self, *args):
        return _IVStudio.IPDraw_AddCursor(self, *args)

    def SetSkyBackground(self, *args):
        return _IVStudio.IPDraw_SetSkyBackground(self, *args)

    def SetProjectionType(self, *args):
        return _IVStudio.IPDraw_SetProjectionType(self, *args)

    def SetOrientation(self, *args):
        return _IVStudio.IPDraw_SetOrientation(self, *args)

    def SetViewCenter(self, *args):
        return _IVStudio.IPDraw_SetViewCenter(self, *args)

    def SetScale(self, *args):
        return _IVStudio.IPDraw_SetScale(self, *args)

    def GetLightCount(self, *args):
        return _IVStudio.IPDraw_GetLightCount(self, *args)

    def NewLight(self, *args):
        return _IVStudio.IPDraw_NewLight(self, *args)

    def Lights(self, *args):
        return _IVStudio.IPDraw_Lights(self, *args)

    def RemoveLight(self, *args):
        return _IVStudio.IPDraw_RemoveLight(self, *args)

    def GetDrawImage(self, *args):
        return _IVStudio.IPDraw_GetDrawImage(self, *args)
IPDraw_swigregister = _IVStudio.IPDraw_swigregister
IPDraw_swigregister(IPDraw)

class IPDataTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPDataTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPDataTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPDataTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPDataTable
    __del__ = lambda self: None
    __swig_setmethods__["grid_id"] = _IVStudio.IPDataTable_grid_id_set
    __swig_getmethods__["grid_id"] = _IVStudio.IPDataTable_grid_id_get
    if _newclass:
        grid_id = _swig_property(_IVStudio.IPDataTable_grid_id_get, _IVStudio.IPDataTable_grid_id_set)

    def SetTableType(self, *args):
        return _IVStudio.IPDataTable_SetTableType(self, *args)

    def ModifyOption(self, *args):
        return _IVStudio.IPDataTable_ModifyOption(self, *args)

    def ModifyPopupMenu(self, *args):
        return _IVStudio.IPDataTable_ModifyPopupMenu(self, *args)

    def GetColNumber(self, *args):
        return _IVStudio.IPDataTable_GetColNumber(self, *args)

    def GetRowNumber(self, *args):
        return _IVStudio.IPDataTable_GetRowNumber(self, *args)

    def SetColNumber(self, *args):
        return _IVStudio.IPDataTable_SetColNumber(self, *args)

    def SetRowNumber(self, *args):
        return _IVStudio.IPDataTable_SetRowNumber(self, *args)

    def AppendRow(self, *args):
        return _IVStudio.IPDataTable_AppendRow(self, *args)

    def AppendCol(self, *args):
        return _IVStudio.IPDataTable_AppendCol(self, *args)

    def InsertRow(self, *args):
        return _IVStudio.IPDataTable_InsertRow(self, *args)

    def InsertCol(self, *args):
        return _IVStudio.IPDataTable_InsertCol(self, *args)

    def InsertCells(self, *args):
        return _IVStudio.IPDataTable_InsertCells(self, *args)

    def RemoveCells(self, *args):
        return _IVStudio.IPDataTable_RemoveCells(self, *args)

    def RemoveRow(self, *args):
        return _IVStudio.IPDataTable_RemoveRow(self, *args)

    def RemoveCol(self, *args):
        return _IVStudio.IPDataTable_RemoveCol(self, *args)

    def RemoveAll(self, *args):
        return _IVStudio.IPDataTable_RemoveAll(self, *args)

    def GetSelCells(self, *args):
        return _IVStudio.IPDataTable_GetSelCells(self, *args)

    def SetSelCells(self, *args):
        return _IVStudio.IPDataTable_SetSelCells(self, *args)

    def JointCells(self, *args):
        return _IVStudio.IPDataTable_JointCells(self, *args)

    def UnJointCells(self, *args):
        return _IVStudio.IPDataTable_UnJointCells(self, *args)

    def SetCellData(self, *args):
        return _IVStudio.IPDataTable_SetCellData(self, *args)

    def SetCellText(self, *args):
        return _IVStudio.IPDataTable_SetCellText(self, *args)

    def SetCellChar(self, *args):
        return _IVStudio.IPDataTable_SetCellChar(self, *args)

    def SetRowData(self, *args):
        return _IVStudio.IPDataTable_SetRowData(self, *args)

    def SetColData(self, *args):
        return _IVStudio.IPDataTable_SetColData(self, *args)

    def SetData(self, *args):
        return _IVStudio.IPDataTable_SetData(self, *args)

    def SetText(self, *args):
        return _IVStudio.IPDataTable_SetText(self, *args)

    def SetReadOnly(self, *args):
        return _IVStudio.IPDataTable_SetReadOnly(self, *args)

    def SetColReadOnly(self, *args):
        return _IVStudio.IPDataTable_SetColReadOnly(self, *args)

    def SetRowReadOnly(self, *args):
        return _IVStudio.IPDataTable_SetRowReadOnly(self, *args)

    def GetCellData(self, *args):
        return _IVStudio.IPDataTable_GetCellData(self, *args)

    def GetCellText(self, *args):
        return _IVStudio.IPDataTable_GetCellText(self, *args)

    def GetData(self, *args):
        return _IVStudio.IPDataTable_GetData(self, *args)

    def GetData2(self, *args):
        return _IVStudio.IPDataTable_GetData2(self, *args)

    def GetColData(self, *args):
        return _IVStudio.IPDataTable_GetColData(self, *args)

    def GetText(self, *args):
        return _IVStudio.IPDataTable_GetText(self, *args)

    def GetColText(self, *args):
        return _IVStudio.IPDataTable_GetColText(self, *args)

    def GetRowData(self, *args):
        return _IVStudio.IPDataTable_GetRowData(self, *args)

    def GetRowText(self, *args):
        return _IVStudio.IPDataTable_GetRowText(self, *args)

    def ClearData(self, *args):
        return _IVStudio.IPDataTable_ClearData(self, *args)

    def DeleteData(self, *args):
        return _IVStudio.IPDataTable_DeleteData(self, *args)

    def SetDefaultColWidth(self, *args):
        return _IVStudio.IPDataTable_SetDefaultColWidth(self, *args)

    def SetDefaultRowHeight(self, *args):
        return _IVStudio.IPDataTable_SetDefaultRowHeight(self, *args)

    def SetColWidth(self, *args):
        return _IVStudio.IPDataTable_SetColWidth(self, *args)

    def SetRowHeight(self, *args):
        return _IVStudio.IPDataTable_SetRowHeight(self, *args)

    def FitColToWindow(self, *args):
        return _IVStudio.IPDataTable_FitColToWindow(self, *args)

    def FitRowToWindow(self, *args):
        return _IVStudio.IPDataTable_FitRowToWindow(self, *args)

    def EnableScroll(self, *args):
        return _IVStudio.IPDataTable_EnableScroll(self, *args)

    def SetTopHeaderNum(self, *args):
        return _IVStudio.IPDataTable_SetTopHeaderNum(self, *args)

    def SetLeftHeaderNum(self, *args):
        return _IVStudio.IPDataTable_SetLeftHeaderNum(self, *args)

    def GetColName(self, *args):
        return _IVStudio.IPDataTable_GetColName(self, *args)

    def SetCellFormat(self, *args):
        return _IVStudio.IPDataTable_SetCellFormat(self, *args)

    def SetCellAlignment(self, *args):
        return _IVStudio.IPDataTable_SetCellAlignment(self, *args)

    def SetCellStyle(self, *args):
        return _IVStudio.IPDataTable_SetCellStyle(self, *args)

    def SetCellType(self, *args):
        return _IVStudio.IPDataTable_SetCellType(self, *args)

    def SetCellTypeStyle(self, *args):
        return _IVStudio.IPDataTable_SetCellTypeStyle(self, *args)

    def SetCellhAlignment(self, *args):
        return _IVStudio.IPDataTable_SetCellhAlignment(self, *args)

    def SetCellvAlignment(self, *args):
        return _IVStudio.IPDataTable_SetCellvAlignment(self, *args)

    def SetCellTextWrap(self, *args):
        return _IVStudio.IPDataTable_SetCellTextWrap(self, *args)

    def SetTextRotation(self, *args):
        return _IVStudio.IPDataTable_SetTextRotation(self, *args)

    def SetDataDecimalNum(self, *args):
        return _IVStudio.IPDataTable_SetDataDecimalNum(self, *args)

    def SetDataCategory(self, *args):
        return _IVStudio.IPDataTable_SetDataCategory(self, *args)

    def SetDataFormat(self, *args):
        return _IVStudio.IPDataTable_SetDataFormat(self, *args)

    def GetFont(self, *args):
        return _IVStudio.IPDataTable_GetFont(self, *args)

    def AddFont(self, *args):
        return _IVStudio.IPDataTable_AddFont(self, *args)

    def SetCellFont(self, *args):
        return _IVStudio.IPDataTable_SetCellFont(self, *args)

    def AddColor(self, *args):
        return _IVStudio.IPDataTable_AddColor(self, *args)

    def SetCellTextColor(self, *args):
        return _IVStudio.IPDataTable_SetCellTextColor(self, *args)

    def SetCellFillColor(self, *args):
        return _IVStudio.IPDataTable_SetCellFillColor(self, *args)

    def TabAppearance(self, *args):
        return _IVStudio.IPDataTable_TabAppearance(self, *args)

    def SetSheetName(self, *args):
        return _IVStudio.IPDataTable_SetSheetName(self, *args)

    def AddSheet(self, *args):
        return _IVStudio.IPDataTable_AddSheet(self, *args)

    def InsertSheet(self, *args):
        return _IVStudio.IPDataTable_InsertSheet(self, *args)

    def RemoveSheet(self, *args):
        return _IVStudio.IPDataTable_RemoveSheet(self, *args)

    def SelectSheet(self, *args):
        return _IVStudio.IPDataTable_SelectSheet(self, *args)

    def GetSheetNumber(self, *args):
        return _IVStudio.IPDataTable_GetSheetNumber(self, *args)

    def GetDataFrame(self, colStart, colEnd, rowStart, rowEnd, needColumnLabel, needIndexLabel, isText):
        import pandas
        ncol = colEnd - colStart + 1
        nrow = rowEnd - rowStart + 1
        n = ncol * nrow
        if(isText):
            data = np.array(self.GetText(colStart, colEnd, 1, rowStart, rowEnd, 1))
        else:
            data = np.zeros(n)
            self.GetData(colStart, colEnd, 1, rowStart, rowEnd, 1, data)
        data = data.reshape([nrow, ncol])
        if(needColumnLabel):
            cols = self.GetRowText(0, colStart, colEnd, 1)
        else:
            cols = np.array(range(0, ncol))
        if(needIndexLabel):
            rows = self.GetColText(0, rowStart, rowEnd, 1)
        else:
            rows = np.array(range(0, nrow))
        return pandas.DataFrame(data, index = rows, columns = cols)

    def GetSeries(self, col, rowStart, rowEnd, needIndexLabel, isText):
        import pandas
        nrow = rowEnd - rowStart + 1
        if(isText):
            data = self.GetColText(col, rowStart, rowEnd, 1)
        else:
            data = np.zeros(nrow)
            self.GetColData(col, rowStart, rowEnd, 1, data)
        if(needIndexLabel):
            rows = self.GetColText(0, rowStart, rowEnd, 1)
        else:
            rows = np.array(range(0, nrow))
        return pandas.Series(data, index = rows)

    def SetDataFrame(self, dataFrame, colStart, rowStart):
        import pandas
        import numbers
        data = dataFrame.values;
        ncol = data.shape[1]
        nrow = data.shape[0]
        for col in range(ncol):
            a = data[:, col]
            if isinstance(a[0], numbers.Number): 
                if a.dtype == object:
                    a = a.astype(np.float64)
                    self.SetColData(col + colStart, rowStart, a, True)
                else:
                    self.SetColData(col + colStart, rowStart, a, True)
            else:
                self.SetText(col + colStart, rowStart, col + colStart, nrow + rowStart - 1, a, False, True)

IPDataTable_swigregister = _IVStudio.IPDataTable_swigregister
IPDataTable_swigregister(IPDataTable)

class IPCamera(IPGraph):
    __swig_setmethods__ = {}
    for _s in [IPGraph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [IPGraph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPCamera, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPCamera
    __del__ = lambda self: None

    def GetImage(self, *args):
        return _IVStudio.IPCamera_GetImage(self, *args)

    def GetImage_uint8(self, *args):
        return _IVStudio.IPCamera_GetImage_uint8(self, *args)

    def ClearBoundingBox(self, *args):
        return _IVStudio.IPCamera_ClearBoundingBox(self, *args)

    def DrawBoundingBox(self, *args):
        return _IVStudio.IPCamera_DrawBoundingBox(self, *args)

    def DrawMaskImage(self, *args):
        return _IVStudio.IPCamera_DrawMaskImage(self, *args)
IPCamera_swigregister = _IVStudio.IPCamera_swigregister
IPCamera_swigregister(IPCamera)

class IPAudio(IPGraph):
    __swig_setmethods__ = {}
    for _s in [IPGraph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAudio, name, value)
    __swig_getmethods__ = {}
    for _s in [IPGraph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IPAudio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPAudio(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPAudio
    __del__ = lambda self: None

    def GetWaveform(self, *args):
        return _IVStudio.IPAudio_GetWaveform(self, *args)
IPAudio_swigregister = _IVStudio.IPAudio_swigregister
IPAudio_swigregister(IPAudio)

class IPStudio(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPStudio, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPStudio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPStudio(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPStudio
    __del__ = lambda self: None
    __swig_setmethods__["DataFolder"] = _IVStudio.IPStudio_DataFolder_set
    __swig_getmethods__["DataFolder"] = _IVStudio.IPStudio_DataFolder_get
    if _newclass:
        DataFolder = _swig_property(_IVStudio.IPStudio_DataFolder_get, _IVStudio.IPStudio_DataFolder_set)
    __swig_setmethods__["ProjectFolder"] = _IVStudio.IPStudio_ProjectFolder_set
    __swig_getmethods__["ProjectFolder"] = _IVStudio.IPStudio_ProjectFolder_get
    if _newclass:
        ProjectFolder = _swig_property(_IVStudio.IPStudio_ProjectFolder_get, _IVStudio.IPStudio_ProjectFolder_set)
    __swig_setmethods__["SystemFolder"] = _IVStudio.IPStudio_SystemFolder_set
    __swig_getmethods__["SystemFolder"] = _IVStudio.IPStudio_SystemFolder_get
    if _newclass:
        SystemFolder = _swig_property(_IVStudio.IPStudio_SystemFolder_get, _IVStudio.IPStudio_SystemFolder_set)

    def SaveTensor4(self, *args):
        return _IVStudio.IPStudio_SaveTensor4(self, *args)

    def SaveTensor4_F(self, *args):
        return _IVStudio.IPStudio_SaveTensor4_F(self, *args)

    def SaveTensor4_I(self, *args):
        return _IVStudio.IPStudio_SaveTensor4_I(self, *args)

    def SaveTensor4_S(self, *args):
        return _IVStudio.IPStudio_SaveTensor4_S(self, *args)

    def SaveTensor4_C(self, *args):
        return _IVStudio.IPStudio_SaveTensor4_C(self, *args)

    def SaveTensor3(self, *args):
        return _IVStudio.IPStudio_SaveTensor3(self, *args)

    def SaveTensor3_F(self, *args):
        return _IVStudio.IPStudio_SaveTensor3_F(self, *args)

    def SaveTensor3_I(self, *args):
        return _IVStudio.IPStudio_SaveTensor3_I(self, *args)

    def SaveTensor3_S(self, *args):
        return _IVStudio.IPStudio_SaveTensor3_S(self, *args)

    def SaveTensor3_C(self, *args):
        return _IVStudio.IPStudio_SaveTensor3_C(self, *args)

    def SaveTensor2(self, *args):
        return _IVStudio.IPStudio_SaveTensor2(self, *args)

    def SaveTensor2_F(self, *args):
        return _IVStudio.IPStudio_SaveTensor2_F(self, *args)

    def SaveTensor2_I(self, *args):
        return _IVStudio.IPStudio_SaveTensor2_I(self, *args)

    def SaveTensor2_S(self, *args):
        return _IVStudio.IPStudio_SaveTensor2_S(self, *args)

    def SaveTensor2_C(self, *args):
        return _IVStudio.IPStudio_SaveTensor2_C(self, *args)

    def SaveTensor1(self, *args):
        return _IVStudio.IPStudio_SaveTensor1(self, *args)

    def SaveTensor1_F(self, *args):
        return _IVStudio.IPStudio_SaveTensor1_F(self, *args)

    def SaveTensor1_I(self, *args):
        return _IVStudio.IPStudio_SaveTensor1_I(self, *args)

    def SaveTensor1_S(self, *args):
        return _IVStudio.IPStudio_SaveTensor1_S(self, *args)

    def SaveTensor1_C(self, *args):
        return _IVStudio.IPStudio_SaveTensor1_C(self, *args)

    def SaveScalar(self, *args):
        return _IVStudio.IPStudio_SaveScalar(self, *args)

    def SaveText(self, *args):
        return _IVStudio.IPStudio_SaveText(self, *args)

    def SaveWaveform2(self, *args):
        return _IVStudio.IPStudio_SaveWaveform2(self, *args)

    def SaveWaveform2_F(self, *args):
        return _IVStudio.IPStudio_SaveWaveform2_F(self, *args)

    def SaveWaveform2_I(self, *args):
        return _IVStudio.IPStudio_SaveWaveform2_I(self, *args)

    def SaveWaveform2_S(self, *args):
        return _IVStudio.IPStudio_SaveWaveform2_S(self, *args)

    def SaveWaveform2_C(self, *args):
        return _IVStudio.IPStudio_SaveWaveform2_C(self, *args)

    def SaveWaveform1(self, *args):
        return _IVStudio.IPStudio_SaveWaveform1(self, *args)

    def SaveWaveform1_F(self, *args):
        return _IVStudio.IPStudio_SaveWaveform1_F(self, *args)

    def SaveWaveform1_I(self, *args):
        return _IVStudio.IPStudio_SaveWaveform1_I(self, *args)

    def SaveWaveform1_S(self, *args):
        return _IVStudio.IPStudio_SaveWaveform1_S(self, *args)

    def SaveWaveform1_C(self, *args):
        return _IVStudio.IPStudio_SaveWaveform1_C(self, *args)

    def StartSaveGraphDef(self, *args):
        return _IVStudio.IPStudio_StartSaveGraphDef(self, *args)

    def CloseSaveGraphDef(self, *args):
        return _IVStudio.IPStudio_CloseSaveGraphDef(self, *args)

    def AddNodeGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeGraphDef(self, *args)

    def CloseNodeGraphDef(self, *args):
        return _IVStudio.IPStudio_CloseNodeGraphDef(self, *args)

    def AddNodeInputGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeInputGraphDef(self, *args)

    def AddNodeAttrIntGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeAttrIntGraphDef(self, *args)

    def AddNodeAttrStringGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeAttrStringGraphDef(self, *args)

    def AddNodeAttrFloatGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeAttrFloatGraphDef(self, *args)

    def AddNodeAttrBoolGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeAttrBoolGraphDef(self, *args)

    def AddNodeAttrShapeGraphDef(self, *args):
        return _IVStudio.IPStudio_AddNodeAttrShapeGraphDef(self, *args)

    def CloseSaver(self, *args):
        return _IVStudio.IPStudio_CloseSaver(self, *args)

    def LogOutput(self, *args):
        return _IVStudio.IPStudio_LogOutput(self, *args)

    def GetKeyState(self, *args):
        return _IVStudio.IPStudio_GetKeyState(self, *args)

    def WriteVideo(self, *args):
        return _IVStudio.IPStudio_WriteVideo(self, *args)

    def LoadVideo(self, *args):
        return _IVStudio.IPStudio_LoadVideo(self, *args)

    def WriteAudio(self, *args):
        return _IVStudio.IPStudio_WriteAudio(self, *args)

    def LoadAudio(self, *args):
        return _IVStudio.IPStudio_LoadAudio(self, *args)

    def GetAudioStream(self, *args):
        return _IVStudio.IPStudio_GetAudioStream(self, *args)

    def GetInputText(self, *args):
        return _IVStudio.IPStudio_GetInputText(self, *args)
IPStudio_swigregister = _IVStudio.IPStudio_swigregister
IPStudio_swigregister(IPStudio)

class IPShell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPShell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPShell
    __del__ = lambda self: None

    def ShellOutput(self, *args):
        return _IVStudio.IPShell_ShellOutput(self, *args)

    def ShellInput(self, *args):
        return _IVStudio.IPShell_ShellInput(self, *args)
IPShell_swigregister = _IVStudio.IPShell_swigregister
IPShell_swigregister(IPShell)

class IPRun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPRun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPRun, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _IVStudio.new_IPRun(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IVStudio.delete_IPRun
    __del__ = lambda self: None

    def DebugStart(self, *args):
        return _IVStudio.IPRun_DebugStart(self, *args)

    def RunOutput(self, *args):
        return _IVStudio.IPRun_RunOutput(self, *args)

    def DebugInfoOutput(self, *args):
        return _IVStudio.IPRun_DebugInfoOutput(self, *args)

    def DebugInfoStatus(self, *args):
        return _IVStudio.IPRun_DebugInfoStatus(self, *args)

    def IsBreakPoint(self, *args):
        return _IVStudio.IPRun_IsBreakPoint(self, *args)

    def WaitAtBreakPoint(self, *args):
        return _IVStudio.IPRun_WaitAtBreakPoint(self, *args)

    def GetBreakPoint(self, *args):
        return _IVStudio.IPRun_GetBreakPoint(self, *args)

    def GetWatchVariable(self, *args):
        return _IVStudio.IPRun_GetWatchVariable(self, *args)
IPRun_swigregister = _IVStudio.IPRun_swigregister
IPRun_swigregister(IPRun)

# This file is compatible with both classic and new-style classes.


